
moisture_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f3c  08003f3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003f3c  08003f3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f3c  08003f3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  08003f54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003f54  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000906d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000184f  00000000  00000000  000290a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002b358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bfd7  00000000  00000000  0002bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000829c  00000000  00000000  00037cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045a67  00000000  00000000  0003ff53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000859ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b4  00000000  00000000  00085a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e34 	.word	0x08003e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003e34 	.word	0x08003e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	0244      	lsls	r4, r0, #9
 800022c:	b5e0      	push	{r5, r6, r7, lr}
 800022e:	0046      	lsls	r6, r0, #1
 8000230:	4688      	mov	r8, r1
 8000232:	0a64      	lsrs	r4, r4, #9
 8000234:	0e36      	lsrs	r6, r6, #24
 8000236:	0fc7      	lsrs	r7, r0, #31
 8000238:	2e00      	cmp	r6, #0
 800023a:	d063      	beq.n	8000304 <__aeabi_fdiv+0xe4>
 800023c:	2eff      	cmp	r6, #255	; 0xff
 800023e:	d024      	beq.n	800028a <__aeabi_fdiv+0x6a>
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	00e4      	lsls	r4, r4, #3
 8000244:	04db      	lsls	r3, r3, #19
 8000246:	431c      	orrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4699      	mov	r9, r3
 800024c:	469b      	mov	fp, r3
 800024e:	3e7f      	subs	r6, #127	; 0x7f
 8000250:	4643      	mov	r3, r8
 8000252:	4642      	mov	r2, r8
 8000254:	025d      	lsls	r5, r3, #9
 8000256:	0fd2      	lsrs	r2, r2, #31
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	0a6d      	lsrs	r5, r5, #9
 800025c:	0e1b      	lsrs	r3, r3, #24
 800025e:	4690      	mov	r8, r2
 8000260:	4692      	mov	sl, r2
 8000262:	d065      	beq.n	8000330 <__aeabi_fdiv+0x110>
 8000264:	2bff      	cmp	r3, #255	; 0xff
 8000266:	d055      	beq.n	8000314 <__aeabi_fdiv+0xf4>
 8000268:	2280      	movs	r2, #128	; 0x80
 800026a:	2100      	movs	r1, #0
 800026c:	00ed      	lsls	r5, r5, #3
 800026e:	04d2      	lsls	r2, r2, #19
 8000270:	3b7f      	subs	r3, #127	; 0x7f
 8000272:	4315      	orrs	r5, r2
 8000274:	1af6      	subs	r6, r6, r3
 8000276:	4643      	mov	r3, r8
 8000278:	464a      	mov	r2, r9
 800027a:	407b      	eors	r3, r7
 800027c:	2a0f      	cmp	r2, #15
 800027e:	d900      	bls.n	8000282 <__aeabi_fdiv+0x62>
 8000280:	e08d      	b.n	800039e <__aeabi_fdiv+0x17e>
 8000282:	486d      	ldr	r0, [pc, #436]	; (8000438 <__aeabi_fdiv+0x218>)
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	5882      	ldr	r2, [r0, r2]
 8000288:	4697      	mov	pc, r2
 800028a:	2c00      	cmp	r4, #0
 800028c:	d154      	bne.n	8000338 <__aeabi_fdiv+0x118>
 800028e:	2308      	movs	r3, #8
 8000290:	4699      	mov	r9, r3
 8000292:	3b06      	subs	r3, #6
 8000294:	26ff      	movs	r6, #255	; 0xff
 8000296:	469b      	mov	fp, r3
 8000298:	e7da      	b.n	8000250 <__aeabi_fdiv+0x30>
 800029a:	2500      	movs	r5, #0
 800029c:	4653      	mov	r3, sl
 800029e:	2902      	cmp	r1, #2
 80002a0:	d01b      	beq.n	80002da <__aeabi_fdiv+0xba>
 80002a2:	2903      	cmp	r1, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e0bf      	b.n	8000428 <__aeabi_fdiv+0x208>
 80002a8:	2901      	cmp	r1, #1
 80002aa:	d028      	beq.n	80002fe <__aeabi_fdiv+0xde>
 80002ac:	0030      	movs	r0, r6
 80002ae:	307f      	adds	r0, #127	; 0x7f
 80002b0:	2800      	cmp	r0, #0
 80002b2:	dd20      	ble.n	80002f6 <__aeabi_fdiv+0xd6>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	0030      	movs	r0, r6
 80002c8:	4a5c      	ldr	r2, [pc, #368]	; (800043c <__aeabi_fdiv+0x21c>)
 80002ca:	3080      	adds	r0, #128	; 0x80
 80002cc:	4015      	ands	r5, r2
 80002ce:	28fe      	cmp	r0, #254	; 0xfe
 80002d0:	dc03      	bgt.n	80002da <__aeabi_fdiv+0xba>
 80002d2:	01ac      	lsls	r4, r5, #6
 80002d4:	0a64      	lsrs	r4, r4, #9
 80002d6:	b2c2      	uxtb	r2, r0
 80002d8:	e001      	b.n	80002de <__aeabi_fdiv+0xbe>
 80002da:	22ff      	movs	r2, #255	; 0xff
 80002dc:	2400      	movs	r4, #0
 80002de:	0264      	lsls	r4, r4, #9
 80002e0:	05d2      	lsls	r2, r2, #23
 80002e2:	0a60      	lsrs	r0, r4, #9
 80002e4:	07db      	lsls	r3, r3, #31
 80002e6:	4310      	orrs	r0, r2
 80002e8:	4318      	orrs	r0, r3
 80002ea:	bc3c      	pop	{r2, r3, r4, r5}
 80002ec:	4690      	mov	r8, r2
 80002ee:	4699      	mov	r9, r3
 80002f0:	46a2      	mov	sl, r4
 80002f2:	46ab      	mov	fp, r5
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f6:	2201      	movs	r2, #1
 80002f8:	1a10      	subs	r0, r2, r0
 80002fa:	281b      	cmp	r0, #27
 80002fc:	dd7c      	ble.n	80003f8 <__aeabi_fdiv+0x1d8>
 80002fe:	2200      	movs	r2, #0
 8000300:	2400      	movs	r4, #0
 8000302:	e7ec      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000304:	2c00      	cmp	r4, #0
 8000306:	d11d      	bne.n	8000344 <__aeabi_fdiv+0x124>
 8000308:	2304      	movs	r3, #4
 800030a:	4699      	mov	r9, r3
 800030c:	3b03      	subs	r3, #3
 800030e:	2600      	movs	r6, #0
 8000310:	469b      	mov	fp, r3
 8000312:	e79d      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000314:	3eff      	subs	r6, #255	; 0xff
 8000316:	2d00      	cmp	r5, #0
 8000318:	d120      	bne.n	800035c <__aeabi_fdiv+0x13c>
 800031a:	2102      	movs	r1, #2
 800031c:	4643      	mov	r3, r8
 800031e:	464a      	mov	r2, r9
 8000320:	407b      	eors	r3, r7
 8000322:	430a      	orrs	r2, r1
 8000324:	2a0f      	cmp	r2, #15
 8000326:	d8d8      	bhi.n	80002da <__aeabi_fdiv+0xba>
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <__aeabi_fdiv+0x220>)
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	5882      	ldr	r2, [r0, r2]
 800032e:	4697      	mov	pc, r2
 8000330:	2d00      	cmp	r5, #0
 8000332:	d119      	bne.n	8000368 <__aeabi_fdiv+0x148>
 8000334:	2101      	movs	r1, #1
 8000336:	e7f1      	b.n	800031c <__aeabi_fdiv+0xfc>
 8000338:	230c      	movs	r3, #12
 800033a:	4699      	mov	r9, r3
 800033c:	3b09      	subs	r3, #9
 800033e:	26ff      	movs	r6, #255	; 0xff
 8000340:	469b      	mov	fp, r3
 8000342:	e785      	b.n	8000250 <__aeabi_fdiv+0x30>
 8000344:	0020      	movs	r0, r4
 8000346:	f000 fc0f 	bl	8000b68 <__clzsi2>
 800034a:	2676      	movs	r6, #118	; 0x76
 800034c:	1f43      	subs	r3, r0, #5
 800034e:	409c      	lsls	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	4276      	negs	r6, r6
 8000354:	1a36      	subs	r6, r6, r0
 8000356:	4699      	mov	r9, r3
 8000358:	469b      	mov	fp, r3
 800035a:	e779      	b.n	8000250 <__aeabi_fdiv+0x30>
 800035c:	464a      	mov	r2, r9
 800035e:	2303      	movs	r3, #3
 8000360:	431a      	orrs	r2, r3
 8000362:	4691      	mov	r9, r2
 8000364:	2103      	movs	r1, #3
 8000366:	e786      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000368:	0028      	movs	r0, r5
 800036a:	f000 fbfd 	bl	8000b68 <__clzsi2>
 800036e:	1f43      	subs	r3, r0, #5
 8000370:	1836      	adds	r6, r6, r0
 8000372:	409d      	lsls	r5, r3
 8000374:	3676      	adds	r6, #118	; 0x76
 8000376:	2100      	movs	r1, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	2480      	movs	r4, #128	; 0x80
 800037c:	2300      	movs	r3, #0
 800037e:	03e4      	lsls	r4, r4, #15
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	e7ac      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000384:	2500      	movs	r5, #0
 8000386:	2380      	movs	r3, #128	; 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421c      	tst	r4, r3
 800038c:	d028      	beq.n	80003e0 <__aeabi_fdiv+0x1c0>
 800038e:	421d      	tst	r5, r3
 8000390:	d126      	bne.n	80003e0 <__aeabi_fdiv+0x1c0>
 8000392:	432b      	orrs	r3, r5
 8000394:	025c      	lsls	r4, r3, #9
 8000396:	0a64      	lsrs	r4, r4, #9
 8000398:	4643      	mov	r3, r8
 800039a:	22ff      	movs	r2, #255	; 0xff
 800039c:	e79f      	b.n	80002de <__aeabi_fdiv+0xbe>
 800039e:	0162      	lsls	r2, r4, #5
 80003a0:	016c      	lsls	r4, r5, #5
 80003a2:	42a2      	cmp	r2, r4
 80003a4:	d224      	bcs.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003a6:	211b      	movs	r1, #27
 80003a8:	2500      	movs	r5, #0
 80003aa:	3e01      	subs	r6, #1
 80003ac:	2701      	movs	r7, #1
 80003ae:	0010      	movs	r0, r2
 80003b0:	006d      	lsls	r5, r5, #1
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2800      	cmp	r0, #0
 80003b6:	db01      	blt.n	80003bc <__aeabi_fdiv+0x19c>
 80003b8:	4294      	cmp	r4, r2
 80003ba:	d801      	bhi.n	80003c0 <__aeabi_fdiv+0x1a0>
 80003bc:	1b12      	subs	r2, r2, r4
 80003be:	433d      	orrs	r5, r7
 80003c0:	3901      	subs	r1, #1
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d1f3      	bne.n	80003ae <__aeabi_fdiv+0x18e>
 80003c6:	0014      	movs	r4, r2
 80003c8:	1e62      	subs	r2, r4, #1
 80003ca:	4194      	sbcs	r4, r2
 80003cc:	4325      	orrs	r5, r4
 80003ce:	e76d      	b.n	80002ac <__aeabi_fdiv+0x8c>
 80003d0:	46ba      	mov	sl, r7
 80003d2:	4659      	mov	r1, fp
 80003d4:	0025      	movs	r5, r4
 80003d6:	4653      	mov	r3, sl
 80003d8:	2902      	cmp	r1, #2
 80003da:	d000      	beq.n	80003de <__aeabi_fdiv+0x1be>
 80003dc:	e761      	b.n	80002a2 <__aeabi_fdiv+0x82>
 80003de:	e77c      	b.n	80002da <__aeabi_fdiv+0xba>
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	03db      	lsls	r3, r3, #15
 80003e4:	431c      	orrs	r4, r3
 80003e6:	0264      	lsls	r4, r4, #9
 80003e8:	0a64      	lsrs	r4, r4, #9
 80003ea:	003b      	movs	r3, r7
 80003ec:	22ff      	movs	r2, #255	; 0xff
 80003ee:	e776      	b.n	80002de <__aeabi_fdiv+0xbe>
 80003f0:	1b12      	subs	r2, r2, r4
 80003f2:	211a      	movs	r1, #26
 80003f4:	2501      	movs	r5, #1
 80003f6:	e7d9      	b.n	80003ac <__aeabi_fdiv+0x18c>
 80003f8:	369e      	adds	r6, #158	; 0x9e
 80003fa:	002a      	movs	r2, r5
 80003fc:	40b5      	lsls	r5, r6
 80003fe:	002c      	movs	r4, r5
 8000400:	40c2      	lsrs	r2, r0
 8000402:	1e65      	subs	r5, r4, #1
 8000404:	41ac      	sbcs	r4, r5
 8000406:	4314      	orrs	r4, r2
 8000408:	0762      	lsls	r2, r4, #29
 800040a:	d004      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 800040c:	220f      	movs	r2, #15
 800040e:	4022      	ands	r2, r4
 8000410:	2a04      	cmp	r2, #4
 8000412:	d000      	beq.n	8000416 <__aeabi_fdiv+0x1f6>
 8000414:	3404      	adds	r4, #4
 8000416:	0162      	lsls	r2, r4, #5
 8000418:	d403      	bmi.n	8000422 <__aeabi_fdiv+0x202>
 800041a:	01a4      	lsls	r4, r4, #6
 800041c:	0a64      	lsrs	r4, r4, #9
 800041e:	2200      	movs	r2, #0
 8000420:	e75d      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000422:	2201      	movs	r2, #1
 8000424:	2400      	movs	r4, #0
 8000426:	e75a      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	03e4      	lsls	r4, r4, #15
 800042c:	432c      	orrs	r4, r5
 800042e:	0264      	lsls	r4, r4, #9
 8000430:	0a64      	lsrs	r4, r4, #9
 8000432:	22ff      	movs	r2, #255	; 0xff
 8000434:	e753      	b.n	80002de <__aeabi_fdiv+0xbe>
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	08003e6c 	.word	0x08003e6c
 800043c:	f7ffffff 	.word	0xf7ffffff
 8000440:	08003eac 	.word	0x08003eac

08000444 <__aeabi_i2f>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	2800      	cmp	r0, #0
 8000448:	d03d      	beq.n	80004c6 <__aeabi_i2f+0x82>
 800044a:	17c3      	asrs	r3, r0, #31
 800044c:	18c5      	adds	r5, r0, r3
 800044e:	405d      	eors	r5, r3
 8000450:	0fc4      	lsrs	r4, r0, #31
 8000452:	0028      	movs	r0, r5
 8000454:	f000 fb88 	bl	8000b68 <__clzsi2>
 8000458:	229e      	movs	r2, #158	; 0x9e
 800045a:	1a12      	subs	r2, r2, r0
 800045c:	2a96      	cmp	r2, #150	; 0x96
 800045e:	dc07      	bgt.n	8000470 <__aeabi_i2f+0x2c>
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	2808      	cmp	r0, #8
 8000464:	dd33      	ble.n	80004ce <__aeabi_i2f+0x8a>
 8000466:	3808      	subs	r0, #8
 8000468:	4085      	lsls	r5, r0
 800046a:	0268      	lsls	r0, r5, #9
 800046c:	0a40      	lsrs	r0, r0, #9
 800046e:	e023      	b.n	80004b8 <__aeabi_i2f+0x74>
 8000470:	2a99      	cmp	r2, #153	; 0x99
 8000472:	dd0b      	ble.n	800048c <__aeabi_i2f+0x48>
 8000474:	2305      	movs	r3, #5
 8000476:	0029      	movs	r1, r5
 8000478:	1a1b      	subs	r3, r3, r0
 800047a:	40d9      	lsrs	r1, r3
 800047c:	0003      	movs	r3, r0
 800047e:	331b      	adds	r3, #27
 8000480:	409d      	lsls	r5, r3
 8000482:	002b      	movs	r3, r5
 8000484:	1e5d      	subs	r5, r3, #1
 8000486:	41ab      	sbcs	r3, r5
 8000488:	4319      	orrs	r1, r3
 800048a:	000d      	movs	r5, r1
 800048c:	2805      	cmp	r0, #5
 800048e:	dd01      	ble.n	8000494 <__aeabi_i2f+0x50>
 8000490:	1f43      	subs	r3, r0, #5
 8000492:	409d      	lsls	r5, r3
 8000494:	002b      	movs	r3, r5
 8000496:	490f      	ldr	r1, [pc, #60]	; (80004d4 <__aeabi_i2f+0x90>)
 8000498:	400b      	ands	r3, r1
 800049a:	076e      	lsls	r6, r5, #29
 800049c:	d009      	beq.n	80004b2 <__aeabi_i2f+0x6e>
 800049e:	260f      	movs	r6, #15
 80004a0:	4035      	ands	r5, r6
 80004a2:	2d04      	cmp	r5, #4
 80004a4:	d005      	beq.n	80004b2 <__aeabi_i2f+0x6e>
 80004a6:	3304      	adds	r3, #4
 80004a8:	015d      	lsls	r5, r3, #5
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_i2f+0x6e>
 80004ac:	229f      	movs	r2, #159	; 0x9f
 80004ae:	400b      	ands	r3, r1
 80004b0:	1a12      	subs	r2, r2, r0
 80004b2:	019b      	lsls	r3, r3, #6
 80004b4:	0a58      	lsrs	r0, r3, #9
 80004b6:	b2d2      	uxtb	r2, r2
 80004b8:	0240      	lsls	r0, r0, #9
 80004ba:	05d2      	lsls	r2, r2, #23
 80004bc:	0a40      	lsrs	r0, r0, #9
 80004be:	07e4      	lsls	r4, r4, #31
 80004c0:	4310      	orrs	r0, r2
 80004c2:	4320      	orrs	r0, r4
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	2400      	movs	r4, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	2000      	movs	r0, #0
 80004cc:	e7f4      	b.n	80004b8 <__aeabi_i2f+0x74>
 80004ce:	0268      	lsls	r0, r5, #9
 80004d0:	0a40      	lsrs	r0, r0, #9
 80004d2:	e7f1      	b.n	80004b8 <__aeabi_i2f+0x74>
 80004d4:	fbffffff 	.word	0xfbffffff

080004d8 <__aeabi_dmul>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	4657      	mov	r7, sl
 80004dc:	46de      	mov	lr, fp
 80004de:	464e      	mov	r6, r9
 80004e0:	4645      	mov	r5, r8
 80004e2:	b5e0      	push	{r5, r6, r7, lr}
 80004e4:	4683      	mov	fp, r0
 80004e6:	0006      	movs	r6, r0
 80004e8:	030f      	lsls	r7, r1, #12
 80004ea:	0048      	lsls	r0, r1, #1
 80004ec:	b087      	sub	sp, #28
 80004ee:	4692      	mov	sl, r2
 80004f0:	001d      	movs	r5, r3
 80004f2:	0b3f      	lsrs	r7, r7, #12
 80004f4:	0d40      	lsrs	r0, r0, #21
 80004f6:	0fcc      	lsrs	r4, r1, #31
 80004f8:	2800      	cmp	r0, #0
 80004fa:	d100      	bne.n	80004fe <__aeabi_dmul+0x26>
 80004fc:	e06f      	b.n	80005de <__aeabi_dmul+0x106>
 80004fe:	4bde      	ldr	r3, [pc, #888]	; (8000878 <__aeabi_dmul+0x3a0>)
 8000500:	4298      	cmp	r0, r3
 8000502:	d038      	beq.n	8000576 <__aeabi_dmul+0x9e>
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	00ff      	lsls	r7, r7, #3
 8000508:	041b      	lsls	r3, r3, #16
 800050a:	431f      	orrs	r7, r3
 800050c:	0f73      	lsrs	r3, r6, #29
 800050e:	433b      	orrs	r3, r7
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	4bda      	ldr	r3, [pc, #872]	; (800087c <__aeabi_dmul+0x3a4>)
 8000514:	2700      	movs	r7, #0
 8000516:	4699      	mov	r9, r3
 8000518:	2300      	movs	r3, #0
 800051a:	469b      	mov	fp, r3
 800051c:	00f6      	lsls	r6, r6, #3
 800051e:	4481      	add	r9, r0
 8000520:	032b      	lsls	r3, r5, #12
 8000522:	0069      	lsls	r1, r5, #1
 8000524:	0b1b      	lsrs	r3, r3, #12
 8000526:	4652      	mov	r2, sl
 8000528:	4698      	mov	r8, r3
 800052a:	0d49      	lsrs	r1, r1, #21
 800052c:	0fed      	lsrs	r5, r5, #31
 800052e:	2900      	cmp	r1, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_dmul+0x5c>
 8000532:	e085      	b.n	8000640 <__aeabi_dmul+0x168>
 8000534:	4bd0      	ldr	r3, [pc, #832]	; (8000878 <__aeabi_dmul+0x3a0>)
 8000536:	4299      	cmp	r1, r3
 8000538:	d100      	bne.n	800053c <__aeabi_dmul+0x64>
 800053a:	e073      	b.n	8000624 <__aeabi_dmul+0x14c>
 800053c:	4643      	mov	r3, r8
 800053e:	00da      	lsls	r2, r3, #3
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	041b      	lsls	r3, r3, #16
 8000544:	4313      	orrs	r3, r2
 8000546:	4652      	mov	r2, sl
 8000548:	48cc      	ldr	r0, [pc, #816]	; (800087c <__aeabi_dmul+0x3a4>)
 800054a:	0f52      	lsrs	r2, r2, #29
 800054c:	4684      	mov	ip, r0
 800054e:	4313      	orrs	r3, r2
 8000550:	4652      	mov	r2, sl
 8000552:	2000      	movs	r0, #0
 8000554:	4461      	add	r1, ip
 8000556:	00d2      	lsls	r2, r2, #3
 8000558:	4489      	add	r9, r1
 800055a:	0021      	movs	r1, r4
 800055c:	4069      	eors	r1, r5
 800055e:	9100      	str	r1, [sp, #0]
 8000560:	468c      	mov	ip, r1
 8000562:	2101      	movs	r1, #1
 8000564:	4449      	add	r1, r9
 8000566:	468a      	mov	sl, r1
 8000568:	2f0f      	cmp	r7, #15
 800056a:	d900      	bls.n	800056e <__aeabi_dmul+0x96>
 800056c:	e090      	b.n	8000690 <__aeabi_dmul+0x1b8>
 800056e:	49c4      	ldr	r1, [pc, #784]	; (8000880 <__aeabi_dmul+0x3a8>)
 8000570:	00bf      	lsls	r7, r7, #2
 8000572:	59cf      	ldr	r7, [r1, r7]
 8000574:	46bf      	mov	pc, r7
 8000576:	465b      	mov	r3, fp
 8000578:	433b      	orrs	r3, r7
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	d000      	beq.n	8000580 <__aeabi_dmul+0xa8>
 800057e:	e16a      	b.n	8000856 <__aeabi_dmul+0x37e>
 8000580:	2302      	movs	r3, #2
 8000582:	2708      	movs	r7, #8
 8000584:	2600      	movs	r6, #0
 8000586:	4681      	mov	r9, r0
 8000588:	469b      	mov	fp, r3
 800058a:	e7c9      	b.n	8000520 <__aeabi_dmul+0x48>
 800058c:	0032      	movs	r2, r6
 800058e:	4658      	mov	r0, fp
 8000590:	9b01      	ldr	r3, [sp, #4]
 8000592:	4661      	mov	r1, ip
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	2802      	cmp	r0, #2
 8000598:	d100      	bne.n	800059c <__aeabi_dmul+0xc4>
 800059a:	e075      	b.n	8000688 <__aeabi_dmul+0x1b0>
 800059c:	2803      	cmp	r0, #3
 800059e:	d100      	bne.n	80005a2 <__aeabi_dmul+0xca>
 80005a0:	e1fe      	b.n	80009a0 <__aeabi_dmul+0x4c8>
 80005a2:	2801      	cmp	r0, #1
 80005a4:	d000      	beq.n	80005a8 <__aeabi_dmul+0xd0>
 80005a6:	e12c      	b.n	8000802 <__aeabi_dmul+0x32a>
 80005a8:	2300      	movs	r3, #0
 80005aa:	2700      	movs	r7, #0
 80005ac:	2600      	movs	r6, #0
 80005ae:	2500      	movs	r5, #0
 80005b0:	033f      	lsls	r7, r7, #12
 80005b2:	0d2a      	lsrs	r2, r5, #20
 80005b4:	0b3f      	lsrs	r7, r7, #12
 80005b6:	48b3      	ldr	r0, [pc, #716]	; (8000884 <__aeabi_dmul+0x3ac>)
 80005b8:	0512      	lsls	r2, r2, #20
 80005ba:	433a      	orrs	r2, r7
 80005bc:	4002      	ands	r2, r0
 80005be:	051b      	lsls	r3, r3, #20
 80005c0:	4313      	orrs	r3, r2
 80005c2:	9a00      	ldr	r2, [sp, #0]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	07d1      	lsls	r1, r2, #31
 80005c8:	085b      	lsrs	r3, r3, #1
 80005ca:	430b      	orrs	r3, r1
 80005cc:	0030      	movs	r0, r6
 80005ce:	0019      	movs	r1, r3
 80005d0:	b007      	add	sp, #28
 80005d2:	bc3c      	pop	{r2, r3, r4, r5}
 80005d4:	4690      	mov	r8, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	46a2      	mov	sl, r4
 80005da:	46ab      	mov	fp, r5
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	465b      	mov	r3, fp
 80005e0:	433b      	orrs	r3, r7
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dmul+0x110>
 80005e6:	e12f      	b.n	8000848 <__aeabi_dmul+0x370>
 80005e8:	2f00      	cmp	r7, #0
 80005ea:	d100      	bne.n	80005ee <__aeabi_dmul+0x116>
 80005ec:	e1a5      	b.n	800093a <__aeabi_dmul+0x462>
 80005ee:	0038      	movs	r0, r7
 80005f0:	f000 faba 	bl	8000b68 <__clzsi2>
 80005f4:	0003      	movs	r3, r0
 80005f6:	3b0b      	subs	r3, #11
 80005f8:	2b1c      	cmp	r3, #28
 80005fa:	dd00      	ble.n	80005fe <__aeabi_dmul+0x126>
 80005fc:	e196      	b.n	800092c <__aeabi_dmul+0x454>
 80005fe:	221d      	movs	r2, #29
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	465a      	mov	r2, fp
 8000604:	0001      	movs	r1, r0
 8000606:	40da      	lsrs	r2, r3
 8000608:	465e      	mov	r6, fp
 800060a:	3908      	subs	r1, #8
 800060c:	408f      	lsls	r7, r1
 800060e:	0013      	movs	r3, r2
 8000610:	408e      	lsls	r6, r1
 8000612:	433b      	orrs	r3, r7
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	4b9c      	ldr	r3, [pc, #624]	; (8000888 <__aeabi_dmul+0x3b0>)
 8000618:	2700      	movs	r7, #0
 800061a:	1a1b      	subs	r3, r3, r0
 800061c:	4699      	mov	r9, r3
 800061e:	2300      	movs	r3, #0
 8000620:	469b      	mov	fp, r3
 8000622:	e77d      	b.n	8000520 <__aeabi_dmul+0x48>
 8000624:	4641      	mov	r1, r8
 8000626:	4653      	mov	r3, sl
 8000628:	430b      	orrs	r3, r1
 800062a:	4993      	ldr	r1, [pc, #588]	; (8000878 <__aeabi_dmul+0x3a0>)
 800062c:	468c      	mov	ip, r1
 800062e:	44e1      	add	r9, ip
 8000630:	2b00      	cmp	r3, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_dmul+0x15e>
 8000634:	e11a      	b.n	800086c <__aeabi_dmul+0x394>
 8000636:	2202      	movs	r2, #2
 8000638:	2002      	movs	r0, #2
 800063a:	4317      	orrs	r7, r2
 800063c:	2200      	movs	r2, #0
 800063e:	e78c      	b.n	800055a <__aeabi_dmul+0x82>
 8000640:	4313      	orrs	r3, r2
 8000642:	d100      	bne.n	8000646 <__aeabi_dmul+0x16e>
 8000644:	e10d      	b.n	8000862 <__aeabi_dmul+0x38a>
 8000646:	4643      	mov	r3, r8
 8000648:	2b00      	cmp	r3, #0
 800064a:	d100      	bne.n	800064e <__aeabi_dmul+0x176>
 800064c:	e181      	b.n	8000952 <__aeabi_dmul+0x47a>
 800064e:	4640      	mov	r0, r8
 8000650:	f000 fa8a 	bl	8000b68 <__clzsi2>
 8000654:	0002      	movs	r2, r0
 8000656:	3a0b      	subs	r2, #11
 8000658:	2a1c      	cmp	r2, #28
 800065a:	dd00      	ble.n	800065e <__aeabi_dmul+0x186>
 800065c:	e172      	b.n	8000944 <__aeabi_dmul+0x46c>
 800065e:	0001      	movs	r1, r0
 8000660:	4643      	mov	r3, r8
 8000662:	3908      	subs	r1, #8
 8000664:	408b      	lsls	r3, r1
 8000666:	4698      	mov	r8, r3
 8000668:	231d      	movs	r3, #29
 800066a:	1a9a      	subs	r2, r3, r2
 800066c:	4653      	mov	r3, sl
 800066e:	40d3      	lsrs	r3, r2
 8000670:	001a      	movs	r2, r3
 8000672:	4643      	mov	r3, r8
 8000674:	4313      	orrs	r3, r2
 8000676:	4652      	mov	r2, sl
 8000678:	408a      	lsls	r2, r1
 800067a:	4649      	mov	r1, r9
 800067c:	1a08      	subs	r0, r1, r0
 800067e:	4982      	ldr	r1, [pc, #520]	; (8000888 <__aeabi_dmul+0x3b0>)
 8000680:	4689      	mov	r9, r1
 8000682:	4481      	add	r9, r0
 8000684:	2000      	movs	r0, #0
 8000686:	e768      	b.n	800055a <__aeabi_dmul+0x82>
 8000688:	4b7b      	ldr	r3, [pc, #492]	; (8000878 <__aeabi_dmul+0x3a0>)
 800068a:	2700      	movs	r7, #0
 800068c:	2600      	movs	r6, #0
 800068e:	e78e      	b.n	80005ae <__aeabi_dmul+0xd6>
 8000690:	0c14      	lsrs	r4, r2, #16
 8000692:	0412      	lsls	r2, r2, #16
 8000694:	0c12      	lsrs	r2, r2, #16
 8000696:	0011      	movs	r1, r2
 8000698:	0c37      	lsrs	r7, r6, #16
 800069a:	0436      	lsls	r6, r6, #16
 800069c:	0c35      	lsrs	r5, r6, #16
 800069e:	4379      	muls	r1, r7
 80006a0:	0028      	movs	r0, r5
 80006a2:	468c      	mov	ip, r1
 80006a4:	002e      	movs	r6, r5
 80006a6:	4360      	muls	r0, r4
 80006a8:	4460      	add	r0, ip
 80006aa:	4683      	mov	fp, r0
 80006ac:	4356      	muls	r6, r2
 80006ae:	0021      	movs	r1, r4
 80006b0:	0c30      	lsrs	r0, r6, #16
 80006b2:	4680      	mov	r8, r0
 80006b4:	4658      	mov	r0, fp
 80006b6:	4379      	muls	r1, r7
 80006b8:	4440      	add	r0, r8
 80006ba:	9102      	str	r1, [sp, #8]
 80006bc:	4584      	cmp	ip, r0
 80006be:	d906      	bls.n	80006ce <__aeabi_dmul+0x1f6>
 80006c0:	4688      	mov	r8, r1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0249      	lsls	r1, r1, #9
 80006c6:	468c      	mov	ip, r1
 80006c8:	44e0      	add	r8, ip
 80006ca:	4641      	mov	r1, r8
 80006cc:	9102      	str	r1, [sp, #8]
 80006ce:	0436      	lsls	r6, r6, #16
 80006d0:	0c01      	lsrs	r1, r0, #16
 80006d2:	0c36      	lsrs	r6, r6, #16
 80006d4:	0400      	lsls	r0, r0, #16
 80006d6:	468b      	mov	fp, r1
 80006d8:	1981      	adds	r1, r0, r6
 80006da:	0c1e      	lsrs	r6, r3, #16
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	0c1b      	lsrs	r3, r3, #16
 80006e0:	9103      	str	r1, [sp, #12]
 80006e2:	0019      	movs	r1, r3
 80006e4:	4379      	muls	r1, r7
 80006e6:	468c      	mov	ip, r1
 80006e8:	0028      	movs	r0, r5
 80006ea:	4375      	muls	r5, r6
 80006ec:	4465      	add	r5, ip
 80006ee:	46a8      	mov	r8, r5
 80006f0:	4358      	muls	r0, r3
 80006f2:	0c05      	lsrs	r5, r0, #16
 80006f4:	4445      	add	r5, r8
 80006f6:	4377      	muls	r7, r6
 80006f8:	42a9      	cmp	r1, r5
 80006fa:	d903      	bls.n	8000704 <__aeabi_dmul+0x22c>
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0249      	lsls	r1, r1, #9
 8000700:	468c      	mov	ip, r1
 8000702:	4467      	add	r7, ip
 8000704:	0c29      	lsrs	r1, r5, #16
 8000706:	468c      	mov	ip, r1
 8000708:	0039      	movs	r1, r7
 800070a:	0400      	lsls	r0, r0, #16
 800070c:	0c00      	lsrs	r0, r0, #16
 800070e:	042d      	lsls	r5, r5, #16
 8000710:	182d      	adds	r5, r5, r0
 8000712:	4461      	add	r1, ip
 8000714:	44ab      	add	fp, r5
 8000716:	9105      	str	r1, [sp, #20]
 8000718:	4659      	mov	r1, fp
 800071a:	9104      	str	r1, [sp, #16]
 800071c:	9901      	ldr	r1, [sp, #4]
 800071e:	040f      	lsls	r7, r1, #16
 8000720:	0c3f      	lsrs	r7, r7, #16
 8000722:	0c08      	lsrs	r0, r1, #16
 8000724:	0039      	movs	r1, r7
 8000726:	4351      	muls	r1, r2
 8000728:	4342      	muls	r2, r0
 800072a:	4690      	mov	r8, r2
 800072c:	0002      	movs	r2, r0
 800072e:	468c      	mov	ip, r1
 8000730:	0c09      	lsrs	r1, r1, #16
 8000732:	468b      	mov	fp, r1
 8000734:	4362      	muls	r2, r4
 8000736:	437c      	muls	r4, r7
 8000738:	4444      	add	r4, r8
 800073a:	445c      	add	r4, fp
 800073c:	45a0      	cmp	r8, r4
 800073e:	d903      	bls.n	8000748 <__aeabi_dmul+0x270>
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0249      	lsls	r1, r1, #9
 8000744:	4688      	mov	r8, r1
 8000746:	4442      	add	r2, r8
 8000748:	0c21      	lsrs	r1, r4, #16
 800074a:	4688      	mov	r8, r1
 800074c:	4661      	mov	r1, ip
 800074e:	0409      	lsls	r1, r1, #16
 8000750:	0c09      	lsrs	r1, r1, #16
 8000752:	468c      	mov	ip, r1
 8000754:	0039      	movs	r1, r7
 8000756:	4359      	muls	r1, r3
 8000758:	4343      	muls	r3, r0
 800075a:	4370      	muls	r0, r6
 800075c:	437e      	muls	r6, r7
 800075e:	0c0f      	lsrs	r7, r1, #16
 8000760:	18f6      	adds	r6, r6, r3
 8000762:	0424      	lsls	r4, r4, #16
 8000764:	19be      	adds	r6, r7, r6
 8000766:	4464      	add	r4, ip
 8000768:	4442      	add	r2, r8
 800076a:	468c      	mov	ip, r1
 800076c:	42b3      	cmp	r3, r6
 800076e:	d903      	bls.n	8000778 <__aeabi_dmul+0x2a0>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	025b      	lsls	r3, r3, #9
 8000774:	4698      	mov	r8, r3
 8000776:	4440      	add	r0, r8
 8000778:	9b02      	ldr	r3, [sp, #8]
 800077a:	4661      	mov	r1, ip
 800077c:	4698      	mov	r8, r3
 800077e:	9b04      	ldr	r3, [sp, #16]
 8000780:	0437      	lsls	r7, r6, #16
 8000782:	4443      	add	r3, r8
 8000784:	469b      	mov	fp, r3
 8000786:	45ab      	cmp	fp, r5
 8000788:	41ad      	sbcs	r5, r5
 800078a:	426b      	negs	r3, r5
 800078c:	040d      	lsls	r5, r1, #16
 800078e:	9905      	ldr	r1, [sp, #20]
 8000790:	0c2d      	lsrs	r5, r5, #16
 8000792:	468c      	mov	ip, r1
 8000794:	197f      	adds	r7, r7, r5
 8000796:	4467      	add	r7, ip
 8000798:	18fd      	adds	r5, r7, r3
 800079a:	46a8      	mov	r8, r5
 800079c:	465d      	mov	r5, fp
 800079e:	192d      	adds	r5, r5, r4
 80007a0:	42a5      	cmp	r5, r4
 80007a2:	41a4      	sbcs	r4, r4
 80007a4:	4693      	mov	fp, r2
 80007a6:	4264      	negs	r4, r4
 80007a8:	46a4      	mov	ip, r4
 80007aa:	44c3      	add	fp, r8
 80007ac:	44dc      	add	ip, fp
 80007ae:	428f      	cmp	r7, r1
 80007b0:	41bf      	sbcs	r7, r7
 80007b2:	4598      	cmp	r8, r3
 80007b4:	419b      	sbcs	r3, r3
 80007b6:	4593      	cmp	fp, r2
 80007b8:	4192      	sbcs	r2, r2
 80007ba:	45a4      	cmp	ip, r4
 80007bc:	41a4      	sbcs	r4, r4
 80007be:	425b      	negs	r3, r3
 80007c0:	427f      	negs	r7, r7
 80007c2:	431f      	orrs	r7, r3
 80007c4:	0c36      	lsrs	r6, r6, #16
 80007c6:	4252      	negs	r2, r2
 80007c8:	4264      	negs	r4, r4
 80007ca:	19bf      	adds	r7, r7, r6
 80007cc:	4322      	orrs	r2, r4
 80007ce:	18bf      	adds	r7, r7, r2
 80007d0:	4662      	mov	r2, ip
 80007d2:	1838      	adds	r0, r7, r0
 80007d4:	0243      	lsls	r3, r0, #9
 80007d6:	0dd2      	lsrs	r2, r2, #23
 80007d8:	9903      	ldr	r1, [sp, #12]
 80007da:	4313      	orrs	r3, r2
 80007dc:	026a      	lsls	r2, r5, #9
 80007de:	430a      	orrs	r2, r1
 80007e0:	1e50      	subs	r0, r2, #1
 80007e2:	4182      	sbcs	r2, r0
 80007e4:	4661      	mov	r1, ip
 80007e6:	0ded      	lsrs	r5, r5, #23
 80007e8:	432a      	orrs	r2, r5
 80007ea:	024e      	lsls	r6, r1, #9
 80007ec:	4332      	orrs	r2, r6
 80007ee:	01d9      	lsls	r1, r3, #7
 80007f0:	d400      	bmi.n	80007f4 <__aeabi_dmul+0x31c>
 80007f2:	e0b3      	b.n	800095c <__aeabi_dmul+0x484>
 80007f4:	2601      	movs	r6, #1
 80007f6:	0850      	lsrs	r0, r2, #1
 80007f8:	4032      	ands	r2, r6
 80007fa:	4302      	orrs	r2, r0
 80007fc:	07de      	lsls	r6, r3, #31
 80007fe:	4332      	orrs	r2, r6
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	4c22      	ldr	r4, [pc, #136]	; (800088c <__aeabi_dmul+0x3b4>)
 8000804:	4454      	add	r4, sl
 8000806:	2c00      	cmp	r4, #0
 8000808:	dd62      	ble.n	80008d0 <__aeabi_dmul+0x3f8>
 800080a:	0751      	lsls	r1, r2, #29
 800080c:	d009      	beq.n	8000822 <__aeabi_dmul+0x34a>
 800080e:	200f      	movs	r0, #15
 8000810:	4010      	ands	r0, r2
 8000812:	2804      	cmp	r0, #4
 8000814:	d005      	beq.n	8000822 <__aeabi_dmul+0x34a>
 8000816:	1d10      	adds	r0, r2, #4
 8000818:	4290      	cmp	r0, r2
 800081a:	4192      	sbcs	r2, r2
 800081c:	4252      	negs	r2, r2
 800081e:	189b      	adds	r3, r3, r2
 8000820:	0002      	movs	r2, r0
 8000822:	01d9      	lsls	r1, r3, #7
 8000824:	d504      	bpl.n	8000830 <__aeabi_dmul+0x358>
 8000826:	2480      	movs	r4, #128	; 0x80
 8000828:	4819      	ldr	r0, [pc, #100]	; (8000890 <__aeabi_dmul+0x3b8>)
 800082a:	00e4      	lsls	r4, r4, #3
 800082c:	4003      	ands	r3, r0
 800082e:	4454      	add	r4, sl
 8000830:	4818      	ldr	r0, [pc, #96]	; (8000894 <__aeabi_dmul+0x3bc>)
 8000832:	4284      	cmp	r4, r0
 8000834:	dd00      	ble.n	8000838 <__aeabi_dmul+0x360>
 8000836:	e727      	b.n	8000688 <__aeabi_dmul+0x1b0>
 8000838:	075e      	lsls	r6, r3, #29
 800083a:	025b      	lsls	r3, r3, #9
 800083c:	08d2      	lsrs	r2, r2, #3
 800083e:	0b1f      	lsrs	r7, r3, #12
 8000840:	0563      	lsls	r3, r4, #21
 8000842:	4316      	orrs	r6, r2
 8000844:	0d5b      	lsrs	r3, r3, #21
 8000846:	e6b2      	b.n	80005ae <__aeabi_dmul+0xd6>
 8000848:	2300      	movs	r3, #0
 800084a:	4699      	mov	r9, r3
 800084c:	3301      	adds	r3, #1
 800084e:	2704      	movs	r7, #4
 8000850:	2600      	movs	r6, #0
 8000852:	469b      	mov	fp, r3
 8000854:	e664      	b.n	8000520 <__aeabi_dmul+0x48>
 8000856:	2303      	movs	r3, #3
 8000858:	9701      	str	r7, [sp, #4]
 800085a:	4681      	mov	r9, r0
 800085c:	270c      	movs	r7, #12
 800085e:	469b      	mov	fp, r3
 8000860:	e65e      	b.n	8000520 <__aeabi_dmul+0x48>
 8000862:	2201      	movs	r2, #1
 8000864:	2001      	movs	r0, #1
 8000866:	4317      	orrs	r7, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e676      	b.n	800055a <__aeabi_dmul+0x82>
 800086c:	2303      	movs	r3, #3
 800086e:	2003      	movs	r0, #3
 8000870:	431f      	orrs	r7, r3
 8000872:	4643      	mov	r3, r8
 8000874:	e671      	b.n	800055a <__aeabi_dmul+0x82>
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	000007ff 	.word	0x000007ff
 800087c:	fffffc01 	.word	0xfffffc01
 8000880:	08003eec 	.word	0x08003eec
 8000884:	800fffff 	.word	0x800fffff
 8000888:	fffffc0d 	.word	0xfffffc0d
 800088c:	000003ff 	.word	0x000003ff
 8000890:	feffffff 	.word	0xfeffffff
 8000894:	000007fe 	.word	0x000007fe
 8000898:	2300      	movs	r3, #0
 800089a:	2780      	movs	r7, #128	; 0x80
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	033f      	lsls	r7, r7, #12
 80008a0:	2600      	movs	r6, #0
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <__aeabi_dmul+0x4d8>)
 80008a4:	e683      	b.n	80005ae <__aeabi_dmul+0xd6>
 80008a6:	9b01      	ldr	r3, [sp, #4]
 80008a8:	0032      	movs	r2, r6
 80008aa:	46a4      	mov	ip, r4
 80008ac:	4658      	mov	r0, fp
 80008ae:	e670      	b.n	8000592 <__aeabi_dmul+0xba>
 80008b0:	46ac      	mov	ip, r5
 80008b2:	e66e      	b.n	8000592 <__aeabi_dmul+0xba>
 80008b4:	2780      	movs	r7, #128	; 0x80
 80008b6:	9901      	ldr	r1, [sp, #4]
 80008b8:	033f      	lsls	r7, r7, #12
 80008ba:	4239      	tst	r1, r7
 80008bc:	d02d      	beq.n	800091a <__aeabi_dmul+0x442>
 80008be:	423b      	tst	r3, r7
 80008c0:	d12b      	bne.n	800091a <__aeabi_dmul+0x442>
 80008c2:	431f      	orrs	r7, r3
 80008c4:	033f      	lsls	r7, r7, #12
 80008c6:	0b3f      	lsrs	r7, r7, #12
 80008c8:	9500      	str	r5, [sp, #0]
 80008ca:	0016      	movs	r6, r2
 80008cc:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <__aeabi_dmul+0x4d8>)
 80008ce:	e66e      	b.n	80005ae <__aeabi_dmul+0xd6>
 80008d0:	2501      	movs	r5, #1
 80008d2:	1b2d      	subs	r5, r5, r4
 80008d4:	2d38      	cmp	r5, #56	; 0x38
 80008d6:	dd00      	ble.n	80008da <__aeabi_dmul+0x402>
 80008d8:	e666      	b.n	80005a8 <__aeabi_dmul+0xd0>
 80008da:	2d1f      	cmp	r5, #31
 80008dc:	dc40      	bgt.n	8000960 <__aeabi_dmul+0x488>
 80008de:	4835      	ldr	r0, [pc, #212]	; (80009b4 <__aeabi_dmul+0x4dc>)
 80008e0:	001c      	movs	r4, r3
 80008e2:	4450      	add	r0, sl
 80008e4:	0016      	movs	r6, r2
 80008e6:	4082      	lsls	r2, r0
 80008e8:	4084      	lsls	r4, r0
 80008ea:	40ee      	lsrs	r6, r5
 80008ec:	1e50      	subs	r0, r2, #1
 80008ee:	4182      	sbcs	r2, r0
 80008f0:	4334      	orrs	r4, r6
 80008f2:	4314      	orrs	r4, r2
 80008f4:	40eb      	lsrs	r3, r5
 80008f6:	0762      	lsls	r2, r4, #29
 80008f8:	d009      	beq.n	800090e <__aeabi_dmul+0x436>
 80008fa:	220f      	movs	r2, #15
 80008fc:	4022      	ands	r2, r4
 80008fe:	2a04      	cmp	r2, #4
 8000900:	d005      	beq.n	800090e <__aeabi_dmul+0x436>
 8000902:	0022      	movs	r2, r4
 8000904:	1d14      	adds	r4, r2, #4
 8000906:	4294      	cmp	r4, r2
 8000908:	4180      	sbcs	r0, r0
 800090a:	4240      	negs	r0, r0
 800090c:	181b      	adds	r3, r3, r0
 800090e:	021a      	lsls	r2, r3, #8
 8000910:	d53e      	bpl.n	8000990 <__aeabi_dmul+0x4b8>
 8000912:	2301      	movs	r3, #1
 8000914:	2700      	movs	r7, #0
 8000916:	2600      	movs	r6, #0
 8000918:	e649      	b.n	80005ae <__aeabi_dmul+0xd6>
 800091a:	2780      	movs	r7, #128	; 0x80
 800091c:	9b01      	ldr	r3, [sp, #4]
 800091e:	033f      	lsls	r7, r7, #12
 8000920:	431f      	orrs	r7, r3
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	0b3f      	lsrs	r7, r7, #12
 8000926:	9400      	str	r4, [sp, #0]
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <__aeabi_dmul+0x4d8>)
 800092a:	e640      	b.n	80005ae <__aeabi_dmul+0xd6>
 800092c:	0003      	movs	r3, r0
 800092e:	465a      	mov	r2, fp
 8000930:	3b28      	subs	r3, #40	; 0x28
 8000932:	409a      	lsls	r2, r3
 8000934:	2600      	movs	r6, #0
 8000936:	9201      	str	r2, [sp, #4]
 8000938:	e66d      	b.n	8000616 <__aeabi_dmul+0x13e>
 800093a:	4658      	mov	r0, fp
 800093c:	f000 f914 	bl	8000b68 <__clzsi2>
 8000940:	3020      	adds	r0, #32
 8000942:	e657      	b.n	80005f4 <__aeabi_dmul+0x11c>
 8000944:	0003      	movs	r3, r0
 8000946:	4652      	mov	r2, sl
 8000948:	3b28      	subs	r3, #40	; 0x28
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	2200      	movs	r2, #0
 8000950:	e693      	b.n	800067a <__aeabi_dmul+0x1a2>
 8000952:	4650      	mov	r0, sl
 8000954:	f000 f908 	bl	8000b68 <__clzsi2>
 8000958:	3020      	adds	r0, #32
 800095a:	e67b      	b.n	8000654 <__aeabi_dmul+0x17c>
 800095c:	46ca      	mov	sl, r9
 800095e:	e750      	b.n	8000802 <__aeabi_dmul+0x32a>
 8000960:	201f      	movs	r0, #31
 8000962:	001e      	movs	r6, r3
 8000964:	4240      	negs	r0, r0
 8000966:	1b04      	subs	r4, r0, r4
 8000968:	40e6      	lsrs	r6, r4
 800096a:	2d20      	cmp	r5, #32
 800096c:	d003      	beq.n	8000976 <__aeabi_dmul+0x49e>
 800096e:	4c12      	ldr	r4, [pc, #72]	; (80009b8 <__aeabi_dmul+0x4e0>)
 8000970:	4454      	add	r4, sl
 8000972:	40a3      	lsls	r3, r4
 8000974:	431a      	orrs	r2, r3
 8000976:	1e50      	subs	r0, r2, #1
 8000978:	4182      	sbcs	r2, r0
 800097a:	4332      	orrs	r2, r6
 800097c:	2607      	movs	r6, #7
 800097e:	2700      	movs	r7, #0
 8000980:	4016      	ands	r6, r2
 8000982:	d009      	beq.n	8000998 <__aeabi_dmul+0x4c0>
 8000984:	200f      	movs	r0, #15
 8000986:	2300      	movs	r3, #0
 8000988:	4010      	ands	r0, r2
 800098a:	0014      	movs	r4, r2
 800098c:	2804      	cmp	r0, #4
 800098e:	d1b9      	bne.n	8000904 <__aeabi_dmul+0x42c>
 8000990:	0022      	movs	r2, r4
 8000992:	075e      	lsls	r6, r3, #29
 8000994:	025b      	lsls	r3, r3, #9
 8000996:	0b1f      	lsrs	r7, r3, #12
 8000998:	08d2      	lsrs	r2, r2, #3
 800099a:	4316      	orrs	r6, r2
 800099c:	2300      	movs	r3, #0
 800099e:	e606      	b.n	80005ae <__aeabi_dmul+0xd6>
 80009a0:	2780      	movs	r7, #128	; 0x80
 80009a2:	033f      	lsls	r7, r7, #12
 80009a4:	431f      	orrs	r7, r3
 80009a6:	033f      	lsls	r7, r7, #12
 80009a8:	0b3f      	lsrs	r7, r7, #12
 80009aa:	0016      	movs	r6, r2
 80009ac:	4b00      	ldr	r3, [pc, #0]	; (80009b0 <__aeabi_dmul+0x4d8>)
 80009ae:	e5fe      	b.n	80005ae <__aeabi_dmul+0xd6>
 80009b0:	000007ff 	.word	0x000007ff
 80009b4:	0000041e 	.word	0x0000041e
 80009b8:	0000043e 	.word	0x0000043e

080009bc <__aeabi_f2d>:
 80009bc:	0041      	lsls	r1, r0, #1
 80009be:	0e09      	lsrs	r1, r1, #24
 80009c0:	1c4b      	adds	r3, r1, #1
 80009c2:	b570      	push	{r4, r5, r6, lr}
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	0246      	lsls	r6, r0, #9
 80009c8:	0a75      	lsrs	r5, r6, #9
 80009ca:	0fc4      	lsrs	r4, r0, #31
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	dd14      	ble.n	80009fa <__aeabi_f2d+0x3e>
 80009d0:	23e0      	movs	r3, #224	; 0xe0
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	076d      	lsls	r5, r5, #29
 80009d6:	0b36      	lsrs	r6, r6, #12
 80009d8:	18cb      	adds	r3, r1, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	0d0a      	lsrs	r2, r1, #20
 80009de:	0028      	movs	r0, r5
 80009e0:	0512      	lsls	r2, r2, #20
 80009e2:	4d1c      	ldr	r5, [pc, #112]	; (8000a54 <__aeabi_f2d+0x98>)
 80009e4:	4332      	orrs	r2, r6
 80009e6:	055b      	lsls	r3, r3, #21
 80009e8:	402a      	ands	r2, r5
 80009ea:	085b      	lsrs	r3, r3, #1
 80009ec:	4313      	orrs	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	07e4      	lsls	r4, r4, #31
 80009f2:	085b      	lsrs	r3, r3, #1
 80009f4:	4323      	orrs	r3, r4
 80009f6:	0019      	movs	r1, r3
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d114      	bne.n	8000a28 <__aeabi_f2d+0x6c>
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d01e      	beq.n	8000a40 <__aeabi_f2d+0x84>
 8000a02:	0028      	movs	r0, r5
 8000a04:	f000 f8b0 	bl	8000b68 <__clzsi2>
 8000a08:	280a      	cmp	r0, #10
 8000a0a:	dc1c      	bgt.n	8000a46 <__aeabi_f2d+0x8a>
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	002a      	movs	r2, r5
 8000a10:	1a1b      	subs	r3, r3, r0
 8000a12:	40da      	lsrs	r2, r3
 8000a14:	0003      	movs	r3, r0
 8000a16:	3315      	adds	r3, #21
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <__aeabi_f2d+0x9c>)
 8000a1c:	0312      	lsls	r2, r2, #12
 8000a1e:	1a1b      	subs	r3, r3, r0
 8000a20:	055b      	lsls	r3, r3, #21
 8000a22:	0b16      	lsrs	r6, r2, #12
 8000a24:	0d5b      	lsrs	r3, r3, #21
 8000a26:	e7d8      	b.n	80009da <__aeabi_f2d+0x1e>
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	d006      	beq.n	8000a3a <__aeabi_f2d+0x7e>
 8000a2c:	0b32      	lsrs	r2, r6, #12
 8000a2e:	2680      	movs	r6, #128	; 0x80
 8000a30:	0336      	lsls	r6, r6, #12
 8000a32:	076d      	lsls	r5, r5, #29
 8000a34:	4316      	orrs	r6, r2
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <__aeabi_f2d+0xa0>)
 8000a38:	e7cf      	b.n	80009da <__aeabi_f2d+0x1e>
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <__aeabi_f2d+0xa0>)
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e7cc      	b.n	80009da <__aeabi_f2d+0x1e>
 8000a40:	2300      	movs	r3, #0
 8000a42:	2600      	movs	r6, #0
 8000a44:	e7c9      	b.n	80009da <__aeabi_f2d+0x1e>
 8000a46:	0003      	movs	r3, r0
 8000a48:	002a      	movs	r2, r5
 8000a4a:	3b0b      	subs	r3, #11
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	2500      	movs	r5, #0
 8000a50:	e7e3      	b.n	8000a1a <__aeabi_f2d+0x5e>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	800fffff 	.word	0x800fffff
 8000a58:	00000389 	.word	0x00000389
 8000a5c:	000007ff 	.word	0x000007ff

08000a60 <__aeabi_d2f>:
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	004c      	lsls	r4, r1, #1
 8000a64:	0d64      	lsrs	r4, r4, #21
 8000a66:	030b      	lsls	r3, r1, #12
 8000a68:	1c62      	adds	r2, r4, #1
 8000a6a:	0a5b      	lsrs	r3, r3, #9
 8000a6c:	0f46      	lsrs	r6, r0, #29
 8000a6e:	0552      	lsls	r2, r2, #21
 8000a70:	0fc9      	lsrs	r1, r1, #31
 8000a72:	431e      	orrs	r6, r3
 8000a74:	00c5      	lsls	r5, r0, #3
 8000a76:	0d52      	lsrs	r2, r2, #21
 8000a78:	2a01      	cmp	r2, #1
 8000a7a:	dd29      	ble.n	8000ad0 <__aeabi_d2f+0x70>
 8000a7c:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <__aeabi_d2f+0xfc>)
 8000a7e:	18e7      	adds	r7, r4, r3
 8000a80:	2ffe      	cmp	r7, #254	; 0xfe
 8000a82:	dc1c      	bgt.n	8000abe <__aeabi_d2f+0x5e>
 8000a84:	2f00      	cmp	r7, #0
 8000a86:	dd3b      	ble.n	8000b00 <__aeabi_d2f+0xa0>
 8000a88:	0180      	lsls	r0, r0, #6
 8000a8a:	1e43      	subs	r3, r0, #1
 8000a8c:	4198      	sbcs	r0, r3
 8000a8e:	2207      	movs	r2, #7
 8000a90:	00f3      	lsls	r3, r6, #3
 8000a92:	0f6d      	lsrs	r5, r5, #29
 8000a94:	4303      	orrs	r3, r0
 8000a96:	432b      	orrs	r3, r5
 8000a98:	401a      	ands	r2, r3
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d004      	beq.n	8000aa8 <__aeabi_d2f+0x48>
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	2a04      	cmp	r2, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_d2f+0x48>
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	04d2      	lsls	r2, r2, #19
 8000aac:	401a      	ands	r2, r3
 8000aae:	d024      	beq.n	8000afa <__aeabi_d2f+0x9a>
 8000ab0:	3701      	adds	r7, #1
 8000ab2:	b2fa      	uxtb	r2, r7
 8000ab4:	2fff      	cmp	r7, #255	; 0xff
 8000ab6:	d002      	beq.n	8000abe <__aeabi_d2f+0x5e>
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	0a58      	lsrs	r0, r3, #9
 8000abc:	e001      	b.n	8000ac2 <__aeabi_d2f+0x62>
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	0240      	lsls	r0, r0, #9
 8000ac4:	05d2      	lsls	r2, r2, #23
 8000ac6:	0a40      	lsrs	r0, r0, #9
 8000ac8:	07c9      	lsls	r1, r1, #31
 8000aca:	4310      	orrs	r0, r2
 8000acc:	4308      	orrs	r0, r1
 8000ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad0:	4335      	orrs	r5, r6
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d104      	bne.n	8000ae0 <__aeabi_d2f+0x80>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d10a      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ada:	2200      	movs	r2, #0
 8000adc:	2000      	movs	r0, #0
 8000ade:	e7f0      	b.n	8000ac2 <__aeabi_d2f+0x62>
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d0ec      	beq.n	8000abe <__aeabi_d2f+0x5e>
 8000ae4:	2080      	movs	r0, #128	; 0x80
 8000ae6:	03c0      	lsls	r0, r0, #15
 8000ae8:	4330      	orrs	r0, r6
 8000aea:	22ff      	movs	r2, #255	; 0xff
 8000aec:	e7e9      	b.n	8000ac2 <__aeabi_d2f+0x62>
 8000aee:	2400      	movs	r4, #0
 8000af0:	2300      	movs	r3, #0
 8000af2:	025b      	lsls	r3, r3, #9
 8000af4:	0a58      	lsrs	r0, r3, #9
 8000af6:	b2e2      	uxtb	r2, r4
 8000af8:	e7e3      	b.n	8000ac2 <__aeabi_d2f+0x62>
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	003c      	movs	r4, r7
 8000afe:	e7f8      	b.n	8000af2 <__aeabi_d2f+0x92>
 8000b00:	003b      	movs	r3, r7
 8000b02:	3317      	adds	r3, #23
 8000b04:	dbf3      	blt.n	8000aee <__aeabi_d2f+0x8e>
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	041b      	lsls	r3, r3, #16
 8000b0a:	4333      	orrs	r3, r6
 8000b0c:	261e      	movs	r6, #30
 8000b0e:	1bf6      	subs	r6, r6, r7
 8000b10:	2e1f      	cmp	r6, #31
 8000b12:	dd14      	ble.n	8000b3e <__aeabi_d2f+0xde>
 8000b14:	2202      	movs	r2, #2
 8000b16:	4252      	negs	r2, r2
 8000b18:	1bd7      	subs	r7, r2, r7
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	40fa      	lsrs	r2, r7
 8000b1e:	0017      	movs	r7, r2
 8000b20:	2e20      	cmp	r6, #32
 8000b22:	d004      	beq.n	8000b2e <__aeabi_d2f+0xce>
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <__aeabi_d2f+0x100>)
 8000b26:	4694      	mov	ip, r2
 8000b28:	4464      	add	r4, ip
 8000b2a:	40a3      	lsls	r3, r4
 8000b2c:	431d      	orrs	r5, r3
 8000b2e:	002b      	movs	r3, r5
 8000b30:	1e5d      	subs	r5, r3, #1
 8000b32:	41ab      	sbcs	r3, r5
 8000b34:	2207      	movs	r2, #7
 8000b36:	433b      	orrs	r3, r7
 8000b38:	401a      	ands	r2, r3
 8000b3a:	2700      	movs	r7, #0
 8000b3c:	e7ad      	b.n	8000a9a <__aeabi_d2f+0x3a>
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <__aeabi_d2f+0x104>)
 8000b40:	0028      	movs	r0, r5
 8000b42:	18a2      	adds	r2, r4, r2
 8000b44:	4095      	lsls	r5, r2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	1e6c      	subs	r4, r5, #1
 8000b4a:	41a5      	sbcs	r5, r4
 8000b4c:	40f0      	lsrs	r0, r6
 8000b4e:	2207      	movs	r2, #7
 8000b50:	432b      	orrs	r3, r5
 8000b52:	4303      	orrs	r3, r0
 8000b54:	401a      	ands	r2, r3
 8000b56:	2700      	movs	r7, #0
 8000b58:	e79f      	b.n	8000a9a <__aeabi_d2f+0x3a>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	fffffc80 	.word	0xfffffc80
 8000b60:	fffffca2 	.word	0xfffffca2
 8000b64:	fffffc82 	.word	0xfffffc82

08000b68 <__clzsi2>:
 8000b68:	211c      	movs	r1, #28
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	041b      	lsls	r3, r3, #16
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d301      	bcc.n	8000b76 <__clzsi2+0xe>
 8000b72:	0c00      	lsrs	r0, r0, #16
 8000b74:	3910      	subs	r1, #16
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	4298      	cmp	r0, r3
 8000b7a:	d301      	bcc.n	8000b80 <__clzsi2+0x18>
 8000b7c:	0a00      	lsrs	r0, r0, #8
 8000b7e:	3908      	subs	r1, #8
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d301      	bcc.n	8000b8a <__clzsi2+0x22>
 8000b86:	0900      	lsrs	r0, r0, #4
 8000b88:	3904      	subs	r1, #4
 8000b8a:	a202      	add	r2, pc, #8	; (adr r2, 8000b94 <__clzsi2+0x2c>)
 8000b8c:	5c10      	ldrb	r0, [r2, r0]
 8000b8e:	1840      	adds	r0, r0, r1
 8000b90:	4770      	bx	lr
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	02020304 	.word	0x02020304
 8000b98:	01010101 	.word	0x01010101
	...

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000baa:	f000 fcd3 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bae:	f000 f88f 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb2:	f000 fab3 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb6:	f000 fa93 	bl	80010e0 <MX_DMA_Init>
  MX_TIM16_Init();
 8000bba:	f000 fa0d 	bl	8000fd8 <MX_TIM16_Init>
  MX_TIM3_Init();
 8000bbe:	f000 f981 	bl	8000ec4 <MX_TIM3_Init>
  MX_ADC_Init();
 8000bc2:	f000 f8cb 	bl	8000d5c <MX_ADC_Init>
  MX_TIM1_Init();
 8000bc6:	f000 f923 	bl	8000e10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* tim16 pwm 1MHz D=50% start */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <main+0xf8>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f002 fa48 	bl	8003064 <HAL_TIM_PWM_Start>

  /* tim3 pwm 1kHz buzzer start */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <main+0xfc>)
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 fa43 	bl	8003064 <HAL_TIM_PWM_Start>

  /* tim3 pwm 1kHz water pump start */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <main+0xfc>)
 8000be0:	210c      	movs	r1, #12
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 fa3e 	bl	8003064 <HAL_TIM_PWM_Start>

  /* calib adc; adc dma start */
  uint16_t ADC_Raw[1];

  HAL_ADCEx_Calibration_Start(&hadc);
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <main+0x100>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 f8e6 	bl	8001dbc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC_Raw, 1);
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <main+0x100>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 fe50 	bl	800189c <HAL_ADC_Start_DMA>

  /* tim1 10Hz int+adc start */
  HAL_TIM_Base_Start_IT(&htim1);
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <main+0x104>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 f9da 	bl	8002fb8 <HAL_TIM_Base_Start_IT>

  /* soil vars */
  uint8_t Soil_Swt = 255;
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Sch_100ms){
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <main+0x108>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0fb      	beq.n	8000c0a <main+0x66>

		  Soil_Moi_V = 3.3*(ADC_Raw[0]/(float)4095.0);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fc14 	bl	8000444 <__aeabi_i2f>
 8000c1c:	1c03      	adds	r3, r0, #0
 8000c1e:	4924      	ldr	r1, [pc, #144]	; (8000cb0 <main+0x10c>)
 8000c20:	1c18      	adds	r0, r3, #0
 8000c22:	f7ff fafd 	bl	8000220 <__aeabi_fdiv>
 8000c26:	1c03      	adds	r3, r0, #0
 8000c28:	1c18      	adds	r0, r3, #0
 8000c2a:	f7ff fec7 	bl	80009bc <__aeabi_f2d>
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <main+0x110>)
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <main+0x114>)
 8000c32:	f7ff fc51 	bl	80004d8 <__aeabi_dmul>
 8000c36:	0003      	movs	r3, r0
 8000c38:	000c      	movs	r4, r1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	0021      	movs	r1, r4
 8000c3e:	f7ff ff0f 	bl	8000a60 <__aeabi_d2f>
 8000c42:	1c02      	adds	r2, r0, #0
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <main+0x118>)
 8000c46:	601a      	str	r2, [r3, #0]

		  if(ADC_Raw[0] >= SOIL_DRY){
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	881a      	ldrh	r2, [r3, #0]
 8000c4c:	23d9      	movs	r3, #217	; 0xd9
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d913      	bls.n	8000c7c <main+0xd8>

			  /* water pump */
			  TIM3->CCR4 = 1000-1; // pump turn on
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <main+0x11c>)
 8000c56:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <main+0x120>)
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40

			  /* buzzer */
			  if(Soil_Swt){
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <main+0xc6>
				  TIM3->CCR2 = 800-1; // buzzer on
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <main+0x11c>)
 8000c64:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <main+0x124>)
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
 8000c68:	e002      	b.n	8000c70 <main+0xcc>
			  }
			  else
			  {
				  TIM3->CCR2 = 0; // buzzer off
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <main+0x11c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  Soil_Swt = ~Soil_Swt;
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	1dfa      	adds	r2, r7, #7
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	43d2      	mvns	r2, r2
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e00a      	b.n	8000c92 <main+0xee>
		  }

		  else if(ADC_Raw[0] <= SOIL_WET){
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <main+0x128>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d805      	bhi.n	8000c92 <main+0xee>
			  /* water pump */
			  TIM3->CCR4 = 0; // pump turn off
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <main+0x11c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40

			  /* buzzer */
			  TIM3->CCR2 = 0; // buzzer off
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <main+0x11c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38




		 /*nullify*/
		  Sch_100ms = 0;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <main+0x108>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
	  if(Sch_100ms){
 8000c98:	e7b7      	b.n	8000c0a <main+0x66>
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	20000134 	.word	0x20000134
 8000ca0:	20000030 	.word	0x20000030
 8000ca4:	200000f4 	.word	0x200000f4
 8000ca8:	20000070 	.word	0x20000070
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	457ff000 	.word	0x457ff000
 8000cb4:	66666666 	.word	0x66666666
 8000cb8:	400a6666 	.word	0x400a6666
 8000cbc:	2000002c 	.word	0x2000002c
 8000cc0:	40000400 	.word	0x40000400
 8000cc4:	000003e7 	.word	0x000003e7
 8000cc8:	0000031f 	.word	0x0000031f
 8000ccc:	000003e1 	.word	0x000003e1

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b091      	sub	sp, #68	; 0x44
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	2410      	movs	r4, #16
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	0018      	movs	r0, r3
 8000cdc:	2330      	movs	r3, #48	; 0x30
 8000cde:	001a      	movs	r2, r3
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f003 f89f 	bl	8003e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2310      	movs	r3, #16
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f003 f898 	bl	8003e24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000cf4:	0021      	movs	r1, r4
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2212      	movs	r2, #18
 8000cfa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2201      	movs	r2, #1
 8000d00:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2201      	movs	r2, #1
 8000d06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2210      	movs	r2, #16
 8000d12:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f001 fcd1 	bl	80026c4 <HAL_RCC_OscConfig>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000d26:	f000 fa33 	bl	8001190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d30:	003b      	movs	r3, r7
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	003b      	movs	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3c:	003b      	movs	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d42:	003b      	movs	r3, r7
 8000d44:	2100      	movs	r1, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 ffd8 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d50:	f000 fa1e 	bl	8001190 <Error_Handler>
  }
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b011      	add	sp, #68	; 0x44
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	0018      	movs	r0, r3
 8000d66:	230c      	movs	r3, #12
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f003 f85a 	bl	8003e24 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d72:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <MX_ADC_Init+0xb0>)
 8000d74:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d90:	2204      	movs	r2, #4
 8000d92:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_ADC_Init+0xac>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_ADC_Init+0xac>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_ADC_Init+0xac>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_ADC_Init+0xac>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_ADC_Init+0xac>)
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	00d2      	lsls	r2, r2, #3
 8000db8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_ADC_Init+0xac>)
 8000dbc:	2224      	movs	r2, #36	; 0x24
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_ADC_Init+0xac>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_ADC_Init+0xac>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fc26 	bl	800161c <HAL_ADC_Init>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f000 f9dc 	bl	8001190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0152      	lsls	r2, r2, #5
 8000de4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2207      	movs	r2, #7
 8000dea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dec:	1d3a      	adds	r2, r7, #4
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_ADC_Init+0xac>)
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fdec 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000dfc:	f000 f9c8 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b004      	add	sp, #16
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200000f4 	.word	0x200000f4
 8000e0c:	40012400 	.word	0x40012400

08000e10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	2308      	movs	r3, #8
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	001a      	movs	r2, r3
 8000e20:	2100      	movs	r1, #0
 8000e22:	f002 ffff 	bl	8003e24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	003b      	movs	r3, r7
 8000e28:	0018      	movs	r0, r3
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f002 fff8 	bl	8003e24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <MX_TIM1_Init+0xa8>)
 8000e38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800-1;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <MX_TIM1_Init+0xac>)
 8000e3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e48:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <MX_TIM1_Init+0xb0>)
 8000e4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 f87d 	bl	8002f60 <HAL_TIM_Base_Init>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000e6a:	f000 f991 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6e:	2108      	movs	r1, #8
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	0152      	lsls	r2, r2, #5
 8000e76:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e78:	187a      	adds	r2, r7, r1
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f002 fb04 	bl	800348c <HAL_TIM_ConfigClockSource>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e88:	f000 f982 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2220      	movs	r2, #32
 8000e90:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e98:	003a      	movs	r2, r7
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_TIM1_Init+0xa4>)
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 fedc 	bl	8003c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ea8:	f000 f972 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000070 	.word	0x20000070
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	0000031f 	.word	0x0000031f
 8000ec0:	000003e7 	.word	0x000003e7

08000ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	2328      	movs	r3, #40	; 0x28
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	0018      	movs	r0, r3
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f002 ffa5 	bl	8003e24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eda:	2320      	movs	r3, #32
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f002 ff9d 	bl	8003e24 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	0018      	movs	r0, r3
 8000eee:	231c      	movs	r3, #28
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f002 ff96 	bl	8003e24 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef8:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000efa:	4a35      	ldr	r2, [pc, #212]	; (8000fd0 <MX_TIM3_Init+0x10c>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000f0a:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f0c:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <MX_TIM3_Init+0x110>)
 8000f0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f002 f81e 	bl	8002f60 <HAL_TIM_Base_Init>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f28:	f000 f932 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2c:	2128      	movs	r1, #40	; 0x28
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0152      	lsls	r2, r2, #5
 8000f34:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f36:	187a      	adds	r2, r7, r1
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f002 faa5 	bl	800348c <HAL_TIM_ConfigClockSource>
 8000f42:	1e03      	subs	r3, r0, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f46:	f000 f923 	bl	8001190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f002 f855 	bl	8002ffc <HAL_TIM_PWM_Init>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f56:	f000 f91b 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f68:	187a      	adds	r2, r7, r1
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f002 fe74 	bl	8003c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000f78:	f000 f90a 	bl	8001190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2260      	movs	r2, #96	; 0x60
 8000f80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f94:	1d39      	adds	r1, r7, #4
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000f98:	2204      	movs	r2, #4
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f002 f9be 	bl	800331c <HAL_TIM_PWM_ConfigChannel>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000fa4:	f000 f8f4 	bl	8001190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa8:	1d39      	adds	r1, r7, #4
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000fac:	220c      	movs	r2, #12
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f002 f9b4 	bl	800331c <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000fb8:	f000 f8ea 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <MX_TIM3_Init+0x108>)
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 f9d4 	bl	800136c <HAL_TIM_MspPostInit>

}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b00e      	add	sp, #56	; 0x38
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000030 	.word	0x20000030
 8000fd0:	40000400 	.word	0x40000400
 8000fd4:	000003e7 	.word	0x000003e7

08000fd8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	; 0x40
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fde:	2324      	movs	r3, #36	; 0x24
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	231c      	movs	r3, #28
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f002 ff1b 	bl	8003e24 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f002 ff14 	bl	8003e24 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_TIM16_Init+0x100>)
 8000ffe:	4a37      	ldr	r2, [pc, #220]	; (80010dc <MX_TIM16_Init+0x104>)
 8001000:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <MX_TIM16_Init+0x100>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_TIM16_Init+0x100>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8-1;
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <MX_TIM16_Init+0x100>)
 8001010:	2207      	movs	r2, #7
 8001012:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <MX_TIM16_Init+0x100>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_TIM16_Init+0x100>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_TIM16_Init+0x100>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_TIM16_Init+0x100>)
 8001028:	0018      	movs	r0, r3
 800102a:	f001 ff99 	bl	8002f60 <HAL_TIM_Base_Init>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001032:	f000 f8ad 	bl	8001190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_TIM16_Init+0x100>)
 8001038:	0018      	movs	r0, r3
 800103a:	f001 ffdf 	bl	8002ffc <HAL_TIM_PWM_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f8a5 	bl	8001190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001046:	2124      	movs	r1, #36	; 0x24
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2260      	movs	r2, #96	; 0x60
 800104c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 4-1;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2203      	movs	r2, #3
 8001052:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001072:	1879      	adds	r1, r7, r1
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM16_Init+0x100>)
 8001076:	2200      	movs	r2, #0
 8001078:	0018      	movs	r0, r3
 800107a:	f002 f94f 	bl	800331c <HAL_TIM_PWM_ConfigChannel>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001082:	f000 f885 	bl	8001190 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0192      	lsls	r2, r2, #6
 80010aa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80010b2:	1d3a      	adds	r2, r7, #4
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_TIM16_Init+0x100>)
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f002 fe21 	bl	8003d00 <HAL_TIMEx_ConfigBreakDeadTime>
 80010be:	1e03      	subs	r3, r0, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80010c2:	f000 f865 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <MX_TIM16_Init+0x100>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 f94f 	bl	800136c <HAL_TIM_MspPostInit>

}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b010      	add	sp, #64	; 0x40
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	20000134 	.word	0x20000134
 80010dc:	40014400 	.word	0x40014400

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x38>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_DMA_Init+0x38>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x38>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2009      	movs	r0, #9
 8001104:	f000 ffa4 	bl	8002050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001108:	2009      	movs	r0, #9
 800110a:	f000 ffb6 	bl	800207a <HAL_NVIC_EnableIRQ>

}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40021000 	.word	0x40021000

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_GPIO_Init+0x48>)
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_GPIO_Init+0x48>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	0289      	lsls	r1, r1, #10
 800112c:	430a      	orrs	r2, r1
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_GPIO_Init+0x48>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_GPIO_Init+0x48>)
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_GPIO_Init+0x48>)
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	02c9      	lsls	r1, r1, #11
 8001148:	430a      	orrs	r2, r1
 800114a:	615a      	str	r2, [r3, #20]
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <MX_GPIO_Init+0x48>)
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	02db      	lsls	r3, r3, #11
 8001154:	4013      	ands	r3, r2
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/************** timer 1 irqhandler *************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d102      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		/* set every 100ms */
		Sch_100ms = 255;
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	701a      	strb	r2, [r3, #0]
	}
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40012c00 	.word	0x40012c00
 800118c:	20000000 	.word	0x20000000

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_MspInit+0x44>)
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_MspInit+0x44>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	619a      	str	r2, [r3, #24]
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_MspInit+0x44>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4013      	ands	r3, r2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_MspInit+0x44>)
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_MspInit+0x44>)
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0549      	lsls	r1, r1, #21
 80011c4:	430a      	orrs	r2, r1
 80011c6:	61da      	str	r2, [r3, #28]
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_MspInit+0x44>)
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	055b      	lsls	r3, r3, #21
 80011d0:	4013      	ands	r3, r2
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	2314      	movs	r3, #20
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	0018      	movs	r0, r3
 80011f2:	2314      	movs	r3, #20
 80011f4:	001a      	movs	r2, r3
 80011f6:	2100      	movs	r1, #0
 80011f8:	f002 fe14 	bl	8003e24 <memset>
  if(hadc->Instance==ADC1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <HAL_ADC_MspInit+0xd4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d154      	bne.n	80012b0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_ADC_MspInit+0xd8>)
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_ADC_MspInit+0xd8>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0089      	lsls	r1, r1, #2
 8001210:	430a      	orrs	r2, r1
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_ADC_MspInit+0xd8>)
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_ADC_MspInit+0xd8>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_ADC_MspInit+0xd8>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0289      	lsls	r1, r1, #10
 800122c:	430a      	orrs	r2, r1
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_ADC_MspInit+0xd8>)
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800123e:	2114      	movs	r1, #20
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2203      	movs	r2, #3
 800124a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	187a      	adds	r2, r7, r1
 8001254:	2390      	movs	r3, #144	; 0x90
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f001 f8c2 	bl	80023e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_ADC_MspInit+0xe0>)
 8001264:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0052      	lsls	r2, r2, #1
 800127e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 800128a:	2220      	movs	r2, #32
 800128c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 8001296:	0018      	movs	r0, r3
 8001298:	f000 ff0c 	bl	80020b4 <HAL_DMA_Init>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d001      	beq.n	80012a4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80012a0:	f7ff ff76 	bl	8001190 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_ADC_MspInit+0xdc>)
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b00a      	add	sp, #40	; 0x28
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40012400 	.word	0x40012400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	200000b0 	.word	0x200000b0
 80012c4:	40020008 	.word	0x40020008

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_TIM_Base_MspInit+0x94>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d116      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	0109      	lsls	r1, r1, #4
 80012e4:	430a      	orrs	r2, r1
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4013      	ands	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	200d      	movs	r0, #13
 80012fc:	f000 fea8 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001300:	200d      	movs	r0, #13
 8001302:	f000 feba 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001306:	e024      	b.n	8001352 <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_TIM_Base_MspInit+0x9c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10c      	bne.n	800132c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 8001314:	69da      	ldr	r2, [r3, #28]
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 8001318:	2102      	movs	r1, #2
 800131a:	430a      	orrs	r2, r1
 800131c:	61da      	str	r2, [r3, #28]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
}
 800132a:	e012      	b.n	8001352 <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM16)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_TIM_Base_MspInit+0xa0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10d      	bne.n	8001352 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 8001338:	699a      	ldr	r2, [r3, #24]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	0289      	lsls	r1, r1, #10
 8001340:	430a      	orrs	r2, r1
 8001342:	619a      	str	r2, [r3, #24]
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_TIM_Base_MspInit+0x98>)
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b006      	add	sp, #24
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	40012c00 	.word	0x40012c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40000400 	.word	0x40000400
 8001368:	40014400 	.word	0x40014400

0800136c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	2314      	movs	r3, #20
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	0018      	movs	r0, r3
 800137a:	2314      	movs	r3, #20
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f002 fd50 	bl	8003e24 <memset>
  if(htim->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a3d      	ldr	r2, [pc, #244]	; (8001480 <HAL_TIM_MspPostInit+0x114>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d149      	bne.n	8001422 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0289      	lsls	r1, r1, #10
 8001398:	430a      	orrs	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	029b      	lsls	r3, r3, #10
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	02c9      	lsls	r1, r1, #11
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b32      	ldr	r3, [pc, #200]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	02db      	lsls	r3, r3, #11
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80013c6:	2414      	movs	r4, #20
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	2202      	movs	r2, #2
 80013d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	2201      	movs	r2, #1
 80013e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80013e6:	193a      	adds	r2, r7, r4
 80013e8:	2390      	movs	r3, #144	; 0x90
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	0011      	movs	r1, r2
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 fff8 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WATER_PUMP_Pin;
 80013f4:	0021      	movs	r1, r4
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2202      	movs	r2, #2
 80013fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2202      	movs	r2, #2
 8001400:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2201      	movs	r2, #1
 8001412:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WATER_PUMP_GPIO_Port, &GPIO_InitStruct);
 8001414:	187b      	adds	r3, r7, r1
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <HAL_TIM_MspPostInit+0x11c>)
 8001418:	0019      	movs	r1, r3
 800141a:	0010      	movs	r0, r2
 800141c:	f000 ffe2 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001420:	e029      	b.n	8001476 <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM16)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_TIM_MspPostInit+0x120>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d124      	bne.n	8001476 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0289      	lsls	r1, r1, #10
 8001436:	430a      	orrs	r2, r1
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_TIM_MspPostInit+0x118>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOI_PWM_Pin;
 8001448:	2114      	movs	r1, #20
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2202      	movs	r2, #2
 8001454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	187b      	adds	r3, r7, r1
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2205      	movs	r2, #5
 8001466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOI_PWM_GPIO_Port, &GPIO_InitStruct);
 8001468:	187a      	adds	r2, r7, r1
 800146a:	2390      	movs	r3, #144	; 0x90
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f000 ffb7 	bl	80023e4 <HAL_GPIO_Init>
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b00b      	add	sp, #44	; 0x2c
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40000400 	.word	0x40000400
 8001484:	40021000 	.word	0x40021000
 8001488:	48000400 	.word	0x48000400
 800148c:	40014400 	.word	0x40014400

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f894 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <DMA1_Channel1_IRQHandler+0x14>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 fea0 	bl	8002210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	200000b0 	.word	0x200000b0

080014dc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 fe04 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000070 	.word	0x20000070

080014f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001502:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopForever+0x6>)
  ldr r1, =_edata
 8001506:	490e      	ldr	r1, [pc, #56]	; (8001540 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <LoopForever+0xe>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopForever+0x12>)
  ldr r4, =_ebss
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <LoopForever+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800152a:	f7ff ffe3 	bl	80014f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800152e:	f002 fc55 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001532:	f7ff fb37 	bl	8000ba4 <main>

08001536 <LoopForever>:

LoopForever:
    b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   r0, =_estack
 8001538:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001544:	08003f44 	.word	0x08003f44
  ldr r2, =_sbss
 8001548:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800154c:	20000178 	.word	0x20000178

08001550 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_IRQHandler>
	...

08001554 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_Init+0x24>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_Init+0x24>)
 800155e:	2110      	movs	r1, #16
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001564:	2000      	movs	r0, #0
 8001566:	f000 f809 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156a:	f7ff fe17 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_InitTick+0x5c>)
 8001586:	681c      	ldr	r4, [r3, #0]
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_InitTick+0x60>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	0019      	movs	r1, r3
 800158e:	23fa      	movs	r3, #250	; 0xfa
 8001590:	0098      	lsls	r0, r3, #2
 8001592:	f7fe fdb9 	bl	8000108 <__udivsi3>
 8001596:	0003      	movs	r3, r0
 8001598:	0019      	movs	r1, r3
 800159a:	0020      	movs	r0, r4
 800159c:	f7fe fdb4 	bl	8000108 <__udivsi3>
 80015a0:	0003      	movs	r3, r0
 80015a2:	0018      	movs	r0, r3
 80015a4:	f000 fd79 	bl	800209a <HAL_SYSTICK_Config>
 80015a8:	1e03      	subs	r3, r0, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e00f      	b.n	80015d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d80b      	bhi.n	80015ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	2301      	movs	r3, #1
 80015ba:	425b      	negs	r3, r3
 80015bc:	2200      	movs	r2, #0
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 fd46 	bl	8002050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_InitTick+0x64>)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b003      	add	sp, #12
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000004 	.word	0x20000004
 80015dc:	2000000c 	.word	0x2000000c
 80015e0:	20000008 	.word	0x20000008

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	001a      	movs	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	18d2      	adds	r2, r2, r3
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_IncTick+0x20>)
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000174 	.word	0x20000174

08001608 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	20000174 	.word	0x20000174

0800161c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001624:	230f      	movs	r3, #15
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e125      	b.n	8001886 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10a      	bne.n	8001658 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2234      	movs	r2, #52	; 0x34
 800164c:	2100      	movs	r1, #0
 800164e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff fdc6 	bl	80011e4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165c:	2210      	movs	r2, #16
 800165e:	4013      	ands	r3, r2
 8001660:	d000      	beq.n	8001664 <HAL_ADC_Init+0x48>
 8001662:	e103      	b.n	800186c <HAL_ADC_Init+0x250>
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d000      	beq.n	8001670 <HAL_ADC_Init+0x54>
 800166e:	e0fd      	b.n	800186c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2204      	movs	r2, #4
 8001678:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800167a:	d000      	beq.n	800167e <HAL_ADC_Init+0x62>
 800167c:	e0f6      	b.n	800186c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	4a83      	ldr	r2, [pc, #524]	; (8001890 <HAL_ADC_Init+0x274>)
 8001684:	4013      	ands	r3, r2
 8001686:	2202      	movs	r2, #2
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2203      	movs	r2, #3
 8001696:	4013      	ands	r3, r2
 8001698:	2b01      	cmp	r3, #1
 800169a:	d112      	bne.n	80016c2 <HAL_ADC_Init+0xa6>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d009      	beq.n	80016be <HAL_ADC_Init+0xa2>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	401a      	ands	r2, r3
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_Init+0xa6>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_Init+0xa8>
 80016c2:	2300      	movs	r3, #0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d116      	bne.n	80016f6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2218      	movs	r2, #24
 80016d0:	4393      	bics	r3, r2
 80016d2:	0019      	movs	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	0899      	lsrs	r1, r3, #2
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4964      	ldr	r1, [pc, #400]	; (8001894 <HAL_ADC_Init+0x278>)
 8001702:	400a      	ands	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7e1b      	ldrb	r3, [r3, #24]
 800170a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e5b      	ldrb	r3, [r3, #25]
 8001710:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001712:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e9b      	ldrb	r3, [r3, #26]
 8001718:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800171a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	2b01      	cmp	r3, #1
 8001722:	d002      	beq.n	800172a <HAL_ADC_Init+0x10e>
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	015b      	lsls	r3, r3, #5
 8001728:	e000      	b.n	800172c <HAL_ADC_Init+0x110>
 800172a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800172c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001732:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d101      	bne.n	8001740 <HAL_ADC_Init+0x124>
 800173c:	2304      	movs	r3, #4
 800173e:	e000      	b.n	8001742 <HAL_ADC_Init+0x126>
 8001740:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001742:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2124      	movs	r1, #36	; 0x24
 8001748:	5c5b      	ldrb	r3, [r3, r1]
 800174a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800174c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7edb      	ldrb	r3, [r3, #27]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d115      	bne.n	8001788 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7e9b      	ldrb	r3, [r3, #26]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	0252      	lsls	r2, r2, #9
 800176a:	4313      	orrs	r3, r2
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	e00b      	b.n	8001788 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	2220      	movs	r2, #32
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	2201      	movs	r2, #1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	23c2      	movs	r3, #194	; 0xc2
 800178e:	33ff      	adds	r3, #255	; 0xff
 8001790:	429a      	cmp	r2, r3
 8001792:	d007      	beq.n	80017a4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800179c:	4313      	orrs	r3, r2
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	055b      	lsls	r3, r3, #21
 80017bc:	429a      	cmp	r2, r3
 80017be:	d01b      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d017      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d013      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d00f      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d00b      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d007      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2b06      	cmp	r3, #6
 80017ee:	d003      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	2b07      	cmp	r3, #7
 80017f6:	d112      	bne.n	800181e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2107      	movs	r1, #7
 8001804:	438a      	bics	r2, r1
 8001806:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6959      	ldr	r1, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	2207      	movs	r2, #7
 8001814:	401a      	ands	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <HAL_ADC_Init+0x27c>)
 8001826:	4013      	ands	r3, r2
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	429a      	cmp	r2, r3
 800182c:	d10b      	bne.n	8001846 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	2203      	movs	r2, #3
 800183a:	4393      	bics	r3, r2
 800183c:	2201      	movs	r2, #1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001844:	e01c      	b.n	8001880 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	2212      	movs	r2, #18
 800184c:	4393      	bics	r3, r2
 800184e:	2210      	movs	r2, #16
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185a:	2201      	movs	r2, #1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001862:	230f      	movs	r3, #15
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800186a:	e009      	b.n	8001880 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	2210      	movs	r2, #16
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001878:	230f      	movs	r3, #15
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001880:	230f      	movs	r3, #15
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	781b      	ldrb	r3, [r3, #0]
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	fffffefd 	.word	0xfffffefd
 8001894:	fffe0219 	.word	0xfffe0219
 8001898:	833fffe7 	.word	0x833fffe7

0800189c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a8:	2317      	movs	r3, #23
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2204      	movs	r2, #4
 80018b8:	4013      	ands	r3, r2
 80018ba:	d15e      	bne.n	800197a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2234      	movs	r2, #52	; 0x34
 80018c0:	5c9b      	ldrb	r3, [r3, r2]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Start_DMA+0x2e>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e05e      	b.n	8001988 <HAL_ADC_Start_DMA+0xec>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2234      	movs	r2, #52	; 0x34
 80018ce:	2101      	movs	r1, #1
 80018d0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	7e5b      	ldrb	r3, [r3, #25]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d007      	beq.n	80018ea <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80018da:	2317      	movs	r3, #23
 80018dc:	18fc      	adds	r4, r7, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f96b 	bl	8001bbc <ADC_Enable>
 80018e6:	0003      	movs	r3, r0
 80018e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ea:	2317      	movs	r3, #23
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d146      	bne.n	8001982 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	4a25      	ldr	r2, [pc, #148]	; (8001990 <HAL_ADC_Start_DMA+0xf4>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	0052      	lsls	r2, r2, #1
 8001900:	431a      	orrs	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2234      	movs	r2, #52	; 0x34
 8001910:	2100      	movs	r1, #0
 8001912:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_ADC_Start_DMA+0xf8>)
 800191a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_ADC_Start_DMA+0xfc>)
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_ADC_Start_DMA+0x100>)
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	221c      	movs	r2, #28
 8001932:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2110      	movs	r1, #16
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3340      	adds	r3, #64	; 0x40
 800195e:	0019      	movs	r1, r3
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f000 fbee 	bl	8002144 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2104      	movs	r1, #4
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e003      	b.n	8001982 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800197a:	2317      	movs	r3, #23
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001982:	2317      	movs	r3, #23
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b007      	add	sp, #28
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	fffff0fe 	.word	0xfffff0fe
 8001994:	08001cb5 	.word	0x08001cb5
 8001998:	08001d69 	.word	0x08001d69
 800199c:	08001d87 	.word	0x08001d87

080019a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019da:	230f      	movs	r3, #15
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	055b      	lsls	r3, r3, #21
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d011      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d00d      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d009      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d005      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d001      	beq.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2234      	movs	r2, #52	; 0x34
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x54>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0bb      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x1cc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2234      	movs	r2, #52	; 0x34
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2204      	movs	r2, #4
 8001a34:	4013      	ands	r3, r2
 8001a36:	d000      	beq.n	8001a3a <HAL_ADC_ConfigChannel+0x6a>
 8001a38:	e09f      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a59      	ldr	r2, [pc, #356]	; (8001ba4 <HAL_ADC_ConfigChannel+0x1d4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d100      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x76>
 8001a44:	e077      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d037      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d033      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d02f      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d02b      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d027      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d023      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d01f      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b07      	cmp	r3, #7
 8001a9e:	d01b      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2107      	movs	r1, #7
 8001aac:	400b      	ands	r3, r1
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d012      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2107      	movs	r1, #7
 8001abe:	438a      	bics	r2, r1
 8001ac0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6959      	ldr	r1, [r3, #20]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2207      	movs	r2, #7
 8001ace:	401a      	ands	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d003      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x118>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b11      	cmp	r3, #17
 8001ae6:	d152      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ae8:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d102      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x12a>
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	e001      	b.n	8001afe <HAL_ADC_ConfigChannel+0x12e>
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	03db      	lsls	r3, r3, #15
 8001afe:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d140      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_ADC_ConfigChannel+0x1dc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4927      	ldr	r1, [pc, #156]	; (8001bb0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7fe faf8 	bl	8000108 <__udivsi3>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	189b      	adds	r3, r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
 8001b34:	e02b      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	4099      	lsls	r1, r3
 8001b44:	000b      	movs	r3, r1
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d003      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x190>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b11      	cmp	r3, #17
 8001b5e:	d116      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1a0>
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x1a2>
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e009      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	2220      	movs	r2, #32
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001b86:	230f      	movs	r3, #15
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2234      	movs	r2, #52	; 0x34
 8001b92:	2100      	movs	r1, #0
 8001b94:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b96:	230f      	movs	r3, #15
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	00001001 	.word	0x00001001
 8001ba8:	40012708 	.word	0x40012708
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	000f4240 	.word	0x000f4240
 8001bb4:	ff7fffff 	.word	0xff7fffff
 8001bb8:	ffbfffff 	.word	0xffbfffff

08001bbc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d112      	bne.n	8001c00 <ADC_Enable+0x44>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d009      	beq.n	8001bfc <ADC_Enable+0x40>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d101      	bne.n	8001c00 <ADC_Enable+0x44>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <ADC_Enable+0x46>
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d14b      	bne.n	8001c9e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <ADC_Enable+0xec>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c16:	2210      	movs	r2, #16
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	2201      	movs	r2, #1
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e038      	b.n	8001ca0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <ADC_Enable+0xf0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	491b      	ldr	r1, [pc, #108]	; (8001cb0 <ADC_Enable+0xf4>)
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7fe fa5f 	bl	8000108 <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c4e:	e002      	b.n	8001c56 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f9      	bne.n	8001c50 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c5c:	f7ff fcd4 	bl	8001608 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c64:	e014      	b.n	8001c90 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c66:	f7ff fccf 	bl	8001608 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d90d      	bls.n	8001c90 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	2210      	movs	r2, #16
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	2201      	movs	r2, #1
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e007      	b.n	8001ca0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d1e3      	bne.n	8001c66 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b004      	add	sp, #16
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	80000017 	.word	0x80000017
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	000f4240 	.word	0x000f4240

08001cb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	2250      	movs	r2, #80	; 0x50
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d140      	bne.n	8001d4e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	23c0      	movs	r3, #192	; 0xc0
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d12d      	bne.n	8001d44 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d129      	bne.n	8001d44 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d122      	bne.n	8001d44 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2204      	movs	r2, #4
 8001d06:	4013      	ands	r3, r2
 8001d08:	d110      	bne.n	8001d2c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	210c      	movs	r1, #12
 8001d16:	438a      	bics	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <ADC_DMAConvCplt+0xb0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	2201      	movs	r2, #1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
 8001d2a:	e00b      	b.n	8001d44 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	2220      	movs	r2, #32
 8001d32:	431a      	orrs	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7ff fe2a 	bl	80019a0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001d4c:	e005      	b.n	8001d5a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	0010      	movs	r0, r2
 8001d58:	4798      	blx	r3
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	fffffefe 	.word	0xfffffefe

08001d68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff fe19 	bl	80019b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da4:	2204      	movs	r2, #4
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff fe06 	bl	80019c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2317      	movs	r3, #23
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2234      	movs	r2, #52	; 0x34
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADCEx_Calibration_Start+0x26>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e084      	b.n	8001eec <HAL_ADCEx_Calibration_Start+0x130>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2234      	movs	r2, #52	; 0x34
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d112      	bne.n	8001e1e <HAL_ADCEx_Calibration_Start+0x62>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d009      	beq.n	8001e1a <HAL_ADCEx_Calibration_Start+0x5e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	401a      	ands	r2, r3
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d101      	bne.n	8001e1e <HAL_ADCEx_Calibration_Start+0x62>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_ADCEx_Calibration_Start+0x64>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d152      	bne.n	8001eca <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <HAL_ADCEx_Calibration_Start+0x138>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	0609      	lsls	r1, r1, #24
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001e62:	f7ff fbd1 	bl	8001608 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e6a:	e014      	b.n	8001e96 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e6c:	f7ff fbcc 	bl	8001608 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d90d      	bls.n	8001e96 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	2212      	movs	r2, #18
 8001e80:	4393      	bics	r3, r2
 8001e82:	2210      	movs	r2, #16
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2234      	movs	r2, #52	; 0x34
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e02a      	b.n	8001eec <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	0fdb      	lsrs	r3, r3, #31
 8001e9e:	07da      	lsls	r2, r3, #31
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d0e1      	beq.n	8001e6c <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4393      	bics	r3, r2
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec8:	e009      	b.n	8001ede <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	2220      	movs	r2, #32
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001ed6:	2317      	movs	r3, #23
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2234      	movs	r2, #52	; 0x34
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001ee6:	2317      	movs	r3, #23
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	781b      	ldrb	r3, [r3, #0]
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b006      	add	sp, #24
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	fffffefd 	.word	0xfffffefd

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	0002      	movs	r2, r0
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b7f      	cmp	r3, #127	; 0x7f
 8001f0a:	d809      	bhi.n	8001f20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	231f      	movs	r3, #31
 8001f14:	401a      	ands	r2, r3
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_EnableIRQ+0x30>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4091      	lsls	r1, r2
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
  }
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	0002      	movs	r2, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f40:	d828      	bhi.n	8001f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f42:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <__NVIC_SetPriority+0xd4>)
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	33c0      	adds	r3, #192	; 0xc0
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	589b      	ldr	r3, [r3, r2]
 8001f52:	1dfa      	adds	r2, r7, #7
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	0011      	movs	r1, r2
 8001f58:	2203      	movs	r2, #3
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	00d2      	lsls	r2, r2, #3
 8001f5e:	21ff      	movs	r1, #255	; 0xff
 8001f60:	4091      	lsls	r1, r2
 8001f62:	000a      	movs	r2, r1
 8001f64:	43d2      	mvns	r2, r2
 8001f66:	401a      	ands	r2, r3
 8001f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	019b      	lsls	r3, r3, #6
 8001f6e:	22ff      	movs	r2, #255	; 0xff
 8001f70:	401a      	ands	r2, r3
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	0018      	movs	r0, r3
 8001f78:	2303      	movs	r3, #3
 8001f7a:	4003      	ands	r3, r0
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f80:	481f      	ldr	r0, [pc, #124]	; (8002000 <__NVIC_SetPriority+0xd4>)
 8001f82:	1dfb      	adds	r3, r7, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	33c0      	adds	r3, #192	; 0xc0
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f92:	e031      	b.n	8001ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f94:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <__NVIC_SetPriority+0xd8>)
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	400b      	ands	r3, r1
 8001fa0:	3b08      	subs	r3, #8
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	18d3      	adds	r3, r2, r3
 8001faa:	3304      	adds	r3, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1dfa      	adds	r2, r7, #7
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	00d2      	lsls	r2, r2, #3
 8001fba:	21ff      	movs	r1, #255	; 0xff
 8001fbc:	4091      	lsls	r1, r2
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	43d2      	mvns	r2, r2
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	22ff      	movs	r2, #255	; 0xff
 8001fcc:	401a      	ands	r2, r3
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	4003      	ands	r3, r0
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fdc:	4809      	ldr	r0, [pc, #36]	; (8002004 <__NVIC_SetPriority+0xd8>)
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	001c      	movs	r4, r3
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	4023      	ands	r3, r4
 8001fe8:	3b08      	subs	r3, #8
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	430a      	orrs	r2, r1
 8001fee:	3306      	adds	r3, #6
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	18c3      	adds	r3, r0, r3
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	601a      	str	r2, [r3, #0]
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b003      	add	sp, #12
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <SysTick_Config+0x40>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e010      	b.n	8002040 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <SysTick_Config+0x44>)
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	3a01      	subs	r2, #1
 8002024:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	2301      	movs	r3, #1
 8002028:	425b      	negs	r3, r3
 800202a:	2103      	movs	r1, #3
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff ff7d 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <SysTick_Config+0x44>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x44>)
 800203a:	2207      	movs	r2, #7
 800203c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203e:	2300      	movs	r3, #0
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}
 8002048:	00ffffff 	.word	0x00ffffff
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	210f      	movs	r1, #15
 800205c:	187b      	adds	r3, r7, r1
 800205e:	1c02      	adds	r2, r0, #0
 8002060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	187b      	adds	r3, r7, r1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b25b      	sxtb	r3, r3
 800206a:	0011      	movs	r1, r2
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b004      	add	sp, #16
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	0002      	movs	r2, r0
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b25b      	sxtb	r3, r3
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ff33 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ffaf 	bl	8002008 <SysTick_Config>
 80020aa:	0003      	movs	r3, r0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e036      	b.n	8002138 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2221      	movs	r2, #33	; 0x21
 80020ce:	2102      	movs	r1, #2
 80020d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_DMA_Init+0x8c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 f946 	bl	80023ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2221      	movs	r2, #33	; 0x21
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}  
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bd80      	pop	{r7, pc}
 8002140:	ffffc00f 	.word	0xffffc00f

08002144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002152:	2317      	movs	r3, #23
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	5c9b      	ldrb	r3, [r3, r2]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_DMA_Start_IT+0x24>
 8002164:	2302      	movs	r3, #2
 8002166:	e04f      	b.n	8002208 <HAL_DMA_Start_IT+0xc4>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	2101      	movs	r1, #1
 800216e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2221      	movs	r2, #33	; 0x21
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d13a      	bne.n	80021f2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	438a      	bics	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f8d7 	bl	8002354 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	210e      	movs	r1, #14
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e00f      	b.n	80021e0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	210a      	movs	r1, #10
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2104      	movs	r1, #4
 80021dc:	438a      	bics	r2, r1
 80021de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e007      	b.n	8002202 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	2100      	movs	r1, #0
 80021f8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80021fa:	2317      	movs	r3, #23
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2202      	movs	r2, #2
 8002200:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002202:	2317      	movs	r3, #23
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	781b      	ldrb	r3, [r3, #0]
} 
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b006      	add	sp, #24
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2204      	movs	r2, #4
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	d024      	beq.n	8002282 <HAL_DMA_IRQHandler+0x72>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2204      	movs	r2, #4
 800223c:	4013      	ands	r3, r2
 800223e:	d020      	beq.n	8002282 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2220      	movs	r2, #32
 8002248:	4013      	ands	r3, r2
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2104      	movs	r1, #4
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2104      	movs	r1, #4
 8002266:	4091      	lsls	r1, r2
 8002268:	000a      	movs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d100      	bne.n	8002276 <HAL_DMA_IRQHandler+0x66>
 8002274:	e06a      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	0010      	movs	r0, r2
 800227e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002280:	e064      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2202      	movs	r2, #2
 8002288:	409a      	lsls	r2, r3
 800228a:	0013      	movs	r3, r2
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	d02b      	beq.n	80022ea <HAL_DMA_IRQHandler+0xda>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d027      	beq.n	80022ea <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2220      	movs	r2, #32
 80022a2:	4013      	ands	r3, r2
 80022a4:	d10b      	bne.n	80022be <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	210a      	movs	r1, #10
 80022b2:	438a      	bics	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2221      	movs	r2, #33	; 0x21
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2102      	movs	r1, #2
 80022c8:	4091      	lsls	r1, r2
 80022ca:	000a      	movs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d036      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	0010      	movs	r0, r2
 80022e6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022e8:	e030      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2208      	movs	r2, #8
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	d028      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2208      	movs	r2, #8
 80022fe:	4013      	ands	r3, r2
 8002300:	d024      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	210e      	movs	r1, #14
 800230e:	438a      	bics	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	2101      	movs	r1, #1
 800231c:	4091      	lsls	r1, r2
 800231e:	000a      	movs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	0010      	movs	r0, r2
 8002348:	4798      	blx	r3
    }
   }
}  
 800234a:	e7ff      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b004      	add	sp, #16
 8002352:	bd80      	pop	{r7, pc}

08002354 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	2101      	movs	r1, #1
 800236c:	4091      	lsls	r1, r2
 800236e:	000a      	movs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d108      	bne.n	8002394 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002392:	e007      	b.n	80023a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	60da      	str	r2, [r3, #12]
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b004      	add	sp, #16
 80023aa:	bd80      	pop	{r7, pc}

080023ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a08      	ldr	r2, [pc, #32]	; (80023dc <DMA_CalcBaseAndBitshift+0x30>)
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	2114      	movs	r1, #20
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fd fea1 	bl	8000108 <__udivsi3>
 80023c6:	0003      	movs	r3, r0
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <DMA_CalcBaseAndBitshift+0x34>)
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	bffdfff8 	.word	0xbffdfff8
 80023e0:	40020000 	.word	0x40020000

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f2:	e14f      	b.n	8002694 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_GPIO_Init+0x28>
 800240a:	e140      	b.n	800268e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d00b      	beq.n	800242c <HAL_GPIO_Init+0x48>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002420:	2b11      	cmp	r3, #17
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b12      	cmp	r3, #18
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	409a      	lsls	r2, r3
 800243a:	0013      	movs	r3, r2
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
 8002468:	0013      	movs	r3, r2
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	2201      	movs	r2, #1
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
 8002480:	0013      	movs	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	409a      	lsls	r2, r3
 800249c:	0013      	movs	r3, r2
 800249e:	43da      	mvns	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	0013      	movs	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0xea>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	58d3      	ldr	r3, [r2, r3]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2207      	movs	r2, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	409a      	lsls	r2, r3
 80024e8:	0013      	movs	r3, r2
 80024ea:	43da      	mvns	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2107      	movs	r1, #7
 80024fa:	400b      	ands	r3, r1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	6939      	ldr	r1, [r7, #16]
 8002514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	409a      	lsls	r2, r3
 8002524:	0013      	movs	r3, r2
 8002526:	43da      	mvns	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2203      	movs	r2, #3
 8002534:	401a      	ands	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	0013      	movs	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	055b      	lsls	r3, r3, #21
 8002552:	4013      	ands	r3, r2
 8002554:	d100      	bne.n	8002558 <HAL_GPIO_Init+0x174>
 8002556:	e09a      	b.n	800268e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	4b51      	ldr	r3, [pc, #324]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002570:	4a4f      	ldr	r2, [pc, #316]	; (80026b0 <HAL_GPIO_Init+0x2cc>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	589b      	ldr	r3, [r3, r2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2203      	movs	r2, #3
 8002582:	4013      	ands	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	409a      	lsls	r2, r3
 800258a:	0013      	movs	r3, r2
 800258c:	43da      	mvns	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	2390      	movs	r3, #144	; 0x90
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	429a      	cmp	r2, r3
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0x1e2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <HAL_GPIO_Init+0x2d0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00d      	beq.n	80025c2 <HAL_GPIO_Init+0x1de>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_GPIO_Init+0x2d4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_GPIO_Init+0x1da>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a42      	ldr	r2, [pc, #264]	; (80026bc <HAL_GPIO_Init+0x2d8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_GPIO_Init+0x1d6>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025ba:	2305      	movs	r3, #5
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x1e4>
 80025c6:	2300      	movs	r3, #0
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	2103      	movs	r1, #3
 80025cc:	400a      	ands	r2, r1
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4093      	lsls	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025d8:	4935      	ldr	r1, [pc, #212]	; (80026b0 <HAL_GPIO_Init+0x2cc>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43da      	mvns	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	025b      	lsls	r3, r3, #9
 80025fe:	4013      	ands	r3, r2
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43da      	mvns	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43da      	mvns	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	035b      	lsls	r3, r3, #13
 8002652:	4013      	ands	r3, r2
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43da      	mvns	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	039b      	lsls	r3, r3, #14
 800267c:	4013      	ands	r3, r2
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	40da      	lsrs	r2, r3
 800269c:	1e13      	subs	r3, r2, #0
 800269e:	d000      	beq.n	80026a2 <HAL_GPIO_Init+0x2be>
 80026a0:	e6a8      	b.n	80023f4 <HAL_GPIO_Init+0x10>
  } 
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b006      	add	sp, #24
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	48000400 	.word	0x48000400
 80026b8:	48000800 	.word	0x48000800
 80026bc:	48000c00 	.word	0x48000c00
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e303      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	d100      	bne.n	80026e2 <HAL_RCC_OscConfig+0x1e>
 80026e0:	e08d      	b.n	80027fe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026e2:	4bc4      	ldr	r3, [pc, #784]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	220c      	movs	r2, #12
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d00e      	beq.n	800270c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026ee:	4bc1      	ldr	r3, [pc, #772]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	220c      	movs	r2, #12
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x64>
 80026fa:	4bbe      	ldr	r3, [pc, #760]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	025b      	lsls	r3, r3, #9
 8002702:	401a      	ands	r2, r3
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	429a      	cmp	r2, r3
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4bb9      	ldr	r3, [pc, #740]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	029b      	lsls	r3, r3, #10
 8002714:	4013      	ands	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x56>
 8002718:	e070      	b.n	80027fc <HAL_RCC_OscConfig+0x138>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d000      	beq.n	8002724 <HAL_RCC_OscConfig+0x60>
 8002722:	e06b      	b.n	80027fc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e2da      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x7c>
 8002730:	4bb0      	ldr	r3, [pc, #704]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4baf      	ldr	r3, [pc, #700]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0249      	lsls	r1, r1, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e02f      	b.n	80027a0 <HAL_RCC_OscConfig+0xdc>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x9e>
 8002748:	4baa      	ldr	r3, [pc, #680]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4ba9      	ldr	r3, [pc, #676]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800274e:	49aa      	ldr	r1, [pc, #680]	; (80029f8 <HAL_RCC_OscConfig+0x334>)
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	4ba7      	ldr	r3, [pc, #668]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4ba6      	ldr	r3, [pc, #664]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800275a:	49a8      	ldr	r1, [pc, #672]	; (80029fc <HAL_RCC_OscConfig+0x338>)
 800275c:	400a      	ands	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e01e      	b.n	80027a0 <HAL_RCC_OscConfig+0xdc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b05      	cmp	r3, #5
 8002768:	d10e      	bne.n	8002788 <HAL_RCC_OscConfig+0xc4>
 800276a:	4ba2      	ldr	r3, [pc, #648]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4ba1      	ldr	r3, [pc, #644]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	02c9      	lsls	r1, r1, #11
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4b9e      	ldr	r3, [pc, #632]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b9d      	ldr	r3, [pc, #628]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	0249      	lsls	r1, r1, #9
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xdc>
 8002788:	4b9a      	ldr	r3, [pc, #616]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b99      	ldr	r3, [pc, #612]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800278e:	499a      	ldr	r1, [pc, #616]	; (80029f8 <HAL_RCC_OscConfig+0x334>)
 8002790:	400a      	ands	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	4b97      	ldr	r3, [pc, #604]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800279a:	4998      	ldr	r1, [pc, #608]	; (80029fc <HAL_RCC_OscConfig+0x338>)
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d014      	beq.n	80027d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe ff2e 	bl	8001608 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b2:	f7fe ff29 	bl	8001608 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e28c      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	4b8b      	ldr	r3, [pc, #556]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	029b      	lsls	r3, r3, #10
 80027cc:	4013      	ands	r3, r2
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0xee>
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe ff19 	bl	8001608 <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe ff14 	bl	8001608 <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e277      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	4b81      	ldr	r3, [pc, #516]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	029b      	lsls	r3, r3, #10
 80027f6:	4013      	ands	r3, r2
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x118>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d100      	bne.n	800280a <HAL_RCC_OscConfig+0x146>
 8002808:	e069      	b.n	80028de <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800280a:	4b7a      	ldr	r3, [pc, #488]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	220c      	movs	r2, #12
 8002810:	4013      	ands	r3, r2
 8002812:	d00b      	beq.n	800282c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002814:	4b77      	ldr	r3, [pc, #476]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	220c      	movs	r2, #12
 800281a:	4013      	ands	r3, r2
 800281c:	2b08      	cmp	r3, #8
 800281e:	d11c      	bne.n	800285a <HAL_RCC_OscConfig+0x196>
 8002820:	4b74      	ldr	r3, [pc, #464]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	025b      	lsls	r3, r3, #9
 8002828:	4013      	ands	r3, r2
 800282a:	d116      	bne.n	800285a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282c:	4b71      	ldr	r3, [pc, #452]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2202      	movs	r2, #2
 8002832:	4013      	ands	r3, r2
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x17e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e24d      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b6c      	ldr	r3, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	22f8      	movs	r2, #248	; 0xf8
 8002848:	4393      	bics	r3, r2
 800284a:	0019      	movs	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	00da      	lsls	r2, r3, #3
 8002852:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002858:	e041      	b.n	80028de <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d024      	beq.n	80028ac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fecb 	bl	8001608 <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fec6 	bl	8001608 <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e229      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2202      	movs	r2, #2
 8002890:	4013      	ands	r3, r2
 8002892:	d0f1      	beq.n	8002878 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b57      	ldr	r3, [pc, #348]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	22f8      	movs	r2, #248	; 0xf8
 800289a:	4393      	bics	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00da      	lsls	r2, r3, #3
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ac:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fea6 	bl	8001608 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe fea1 	bl	8001608 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e204      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d4:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2202      	movs	r2, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d1f1      	bne.n	80028c2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2208      	movs	r2, #8
 80028e4:	4013      	ands	r3, r2
 80028e6:	d036      	beq.n	8002956 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d019      	beq.n	8002924 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f0:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80028f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fe84 	bl	8001608 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002906:	f7fe fe7f 	bl	8001608 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1e2      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d0f1      	beq.n	8002906 <HAL_RCC_OscConfig+0x242>
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002928:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800292a:	2101      	movs	r1, #1
 800292c:	438a      	bics	r2, r1
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fe6a 	bl	8001608 <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293a:	f7fe fe65 	bl	8001608 <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1c8      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	d1f1      	bne.n	800293a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2204      	movs	r2, #4
 800295c:	4013      	ands	r3, r2
 800295e:	d100      	bne.n	8002962 <HAL_RCC_OscConfig+0x29e>
 8002960:	e0b6      	b.n	8002ad0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002962:	231f      	movs	r3, #31
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	055b      	lsls	r3, r3, #21
 8002972:	4013      	ands	r3, r2
 8002974:	d111      	bne.n	800299a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	0549      	lsls	r1, r1, #21
 8002980:	430a      	orrs	r2, r1
 8002982:	61da      	str	r2, [r3, #28]
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	055b      	lsls	r3, r3, #21
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002992:	231f      	movs	r3, #31
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_OscConfig+0x33c>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	d11a      	bne.n	80029dc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_OscConfig+0x33c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x33c>)
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	0049      	lsls	r1, r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fe28 	bl	8001608 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe fe23 	bl	8001608 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e186      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_OscConfig+0x33c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10f      	bne.n	8002a04 <HAL_RCC_OscConfig+0x340>
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	4b02      	ldr	r3, [pc, #8]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80029ea:	2101      	movs	r1, #1
 80029ec:	430a      	orrs	r2, r1
 80029ee:	621a      	str	r2, [r3, #32]
 80029f0:	e036      	b.n	8002a60 <HAL_RCC_OscConfig+0x39c>
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40021000 	.word	0x40021000
 80029f8:	fffeffff 	.word	0xfffeffff
 80029fc:	fffbffff 	.word	0xfffbffff
 8002a00:	40007000 	.word	0x40007000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCC_OscConfig+0x362>
 8002a0c:	4bb6      	ldr	r3, [pc, #728]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	4bb5      	ldr	r3, [pc, #724]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	438a      	bics	r2, r1
 8002a16:	621a      	str	r2, [r3, #32]
 8002a18:	4bb3      	ldr	r3, [pc, #716]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a1a:	6a1a      	ldr	r2, [r3, #32]
 8002a1c:	4bb2      	ldr	r3, [pc, #712]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a1e:	2104      	movs	r1, #4
 8002a20:	438a      	bics	r2, r1
 8002a22:	621a      	str	r2, [r3, #32]
 8002a24:	e01c      	b.n	8002a60 <HAL_RCC_OscConfig+0x39c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b05      	cmp	r3, #5
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x384>
 8002a2e:	4bae      	ldr	r3, [pc, #696]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	4bad      	ldr	r3, [pc, #692]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a34:	2104      	movs	r1, #4
 8002a36:	430a      	orrs	r2, r1
 8002a38:	621a      	str	r2, [r3, #32]
 8002a3a:	4bab      	ldr	r3, [pc, #684]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	4baa      	ldr	r3, [pc, #680]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	621a      	str	r2, [r3, #32]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0x39c>
 8002a48:	4ba7      	ldr	r3, [pc, #668]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	4ba6      	ldr	r3, [pc, #664]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	438a      	bics	r2, r1
 8002a52:	621a      	str	r2, [r3, #32]
 8002a54:	4ba4      	ldr	r3, [pc, #656]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	4ba3      	ldr	r3, [pc, #652]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d014      	beq.n	8002a92 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe fdce 	bl	8001608 <HAL_GetTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fdc9 	bl	8001608 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	4a9b      	ldr	r2, [pc, #620]	; (8002cec <HAL_RCC_OscConfig+0x628>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e12b      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	4b98      	ldr	r3, [pc, #608]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x3ae>
 8002a90:	e013      	b.n	8002aba <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fdb9 	bl	8001608 <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9a:	e009      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fdb4 	bl	8001608 <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	4a91      	ldr	r2, [pc, #580]	; (8002cec <HAL_RCC_OscConfig+0x628>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e116      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	4b8d      	ldr	r3, [pc, #564]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aba:	231f      	movs	r3, #31
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	4b87      	ldr	r3, [pc, #540]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002aca:	4989      	ldr	r1, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x62c>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d063      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d12a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ae2:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae6:	4b80      	ldr	r3, [pc, #512]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002ae8:	2104      	movs	r1, #4
 8002aea:	430a      	orrs	r2, r1
 8002aec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002aee:	4b7e      	ldr	r3, [pc, #504]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	430a      	orrs	r2, r1
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fd85 	bl	8001608 <HAL_GetTick>
 8002afe:	0003      	movs	r3, r0
 8002b00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b04:	f7fe fd80 	bl	8001608 <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0e3      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b16:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0f1      	beq.n	8002b04 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b20:	4b71      	ldr	r3, [pc, #452]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	22f8      	movs	r2, #248	; 0xf8
 8002b26:	4393      	bics	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	00da      	lsls	r2, r3, #3
 8002b30:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	635a      	str	r2, [r3, #52]	; 0x34
 8002b36:	e034      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	3305      	adds	r3, #5
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b40:	4b69      	ldr	r3, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b46:	2104      	movs	r1, #4
 8002b48:	438a      	bics	r2, r1
 8002b4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b4c:	4b66      	ldr	r3, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	22f8      	movs	r2, #248	; 0xf8
 8002b52:	4393      	bics	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	00da      	lsls	r2, r3, #3
 8002b5c:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34
 8002b62:	e01e      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b64:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b68:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b6a:	2104      	movs	r1, #4
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b70:	4b5d      	ldr	r3, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b74:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	438a      	bics	r2, r1
 8002b7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fd44 	bl	8001608 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b86:	f7fe fd3f 	bl	8001608 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0a2      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d1f1      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d100      	bne.n	8002bac <HAL_RCC_OscConfig+0x4e8>
 8002baa:	e097      	b.n	8002cdc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bac:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	220c      	movs	r2, #12
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d100      	bne.n	8002bba <HAL_RCC_OscConfig+0x4f6>
 8002bb8:	e06b      	b.n	8002c92 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d14c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002bc8:	494a      	ldr	r1, [pc, #296]	; (8002cf4 <HAL_RCC_OscConfig+0x630>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe fd1b 	bl	8001608 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fd16 	bl	8001608 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e079      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	049b      	lsls	r3, r3, #18
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <HAL_RCC_OscConfig+0x634>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	0449      	lsls	r1, r1, #17
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fce9 	bl	8001608 <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fce4 	bl	8001608 <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e047      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	049b      	lsls	r3, r3, #18
 8002c56:	4013      	ands	r3, r2
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x578>
 8002c5a:	e03f      	b.n	8002cdc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c62:	4924      	ldr	r1, [pc, #144]	; (8002cf4 <HAL_RCC_OscConfig+0x630>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fcce 	bl	8001608 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fe fcc9 	bl	8001608 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e02c      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	049b      	lsls	r3, r3, #18
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x5ae>
 8002c90:	e024      	b.n	8002cdc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e01f      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x624>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	025b      	lsls	r3, r3, #9
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	23f0      	movs	r3, #240	; 0xf0
 8002ccc:	039b      	lsls	r3, r3, #14
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b008      	add	sp, #32
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	00001388 	.word	0x00001388
 8002cf0:	efffffff 	.word	0xefffffff
 8002cf4:	feffffff 	.word	0xfeffffff
 8002cf8:	ffc2ffff 	.word	0xffc2ffff

08002cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b3      	b.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d911      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b58      	ldr	r3, [pc, #352]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	4393      	bics	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	4b55      	ldr	r3, [pc, #340]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2201      	movs	r2, #1
 8002d36:	4013      	ands	r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e09a      	b.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2202      	movs	r2, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d015      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2204      	movs	r2, #4
 8002d52:	4013      	ands	r3, r2
 8002d54:	d006      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d56:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002d5c:	21e0      	movs	r1, #224	; 0xe0
 8002d5e:	00c9      	lsls	r1, r1, #3
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	22f0      	movs	r2, #240	; 0xf0
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d040      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	4013      	ands	r3, r2
 8002d94:	d114      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06e      	b.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	049b      	lsls	r3, r3, #18
 8002daa:	4013      	ands	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e062      	b.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2202      	movs	r2, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e05b      	b.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fc18 	bl	8001608 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ddc:	e009      	b.n	8002df2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dde:	f7fe fc13 	bl	8001608 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_RCC_ClockConfig+0x18c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e042      	b.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	220c      	movs	r2, #12
 8002df8:	401a      	ands	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1ec      	bne.n	8002dde <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d211      	bcs.n	8002e36 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4393      	bics	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_RCC_ClockConfig+0x184>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e020      	b.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <HAL_RCC_ClockConfig+0x190>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e54:	f000 f820 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e58:	0001      	movs	r1, r0
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x188>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	220f      	movs	r2, #15
 8002e62:	4013      	ands	r3, r2
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_RCC_ClockConfig+0x194>)
 8002e66:	5cd3      	ldrb	r3, [r2, r3]
 8002e68:	000a      	movs	r2, r1
 8002e6a:	40da      	lsrs	r2, r3
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x198>)
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fe fb83 	bl	800157c <HAL_InitTick>
  
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b004      	add	sp, #16
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40022000 	.word	0x40022000
 8002e84:	40021000 	.word	0x40021000
 8002e88:	00001388 	.word	0x00001388
 8002e8c:	fffff8ff 	.word	0xfffff8ff
 8002e90:	08003f2c 	.word	0x08003f2c
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b08f      	sub	sp, #60	; 0x3c
 8002e9c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002e9e:	2314      	movs	r3, #20
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ea6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eb2:	c313      	stmia	r3!, {r0, r1, r4}
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	220c      	movs	r2, #12
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d002      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x4a>
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d003      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x50>
 8002ee0:	e02d      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ee6:	e02d      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	220f      	movs	r2, #15
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2214      	movs	r2, #20
 8002ef2:	18ba      	adds	r2, r7, r2
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	220f      	movs	r2, #15
 8002efe:	4013      	ands	r3, r2
 8002f00:	1d3a      	adds	r2, r7, #4
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	025b      	lsls	r3, r3, #9
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f12:	4812      	ldr	r0, [pc, #72]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f14:	f7fd f8f8 	bl	8000108 <__udivsi3>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	001a      	movs	r2, r3
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	4353      	muls	r3, r2
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	e009      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f26:	000a      	movs	r2, r1
 8002f28:	0152      	lsls	r2, r2, #5
 8002f2a:	1a52      	subs	r2, r2, r1
 8002f2c:	0193      	lsls	r3, r2, #6
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	185b      	adds	r3, r3, r1
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f3c:	e002      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f42:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b00f      	add	sp, #60	; 0x3c
 8002f4c:	bd90      	pop	{r4, r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	08003e4c 	.word	0x08003e4c
 8002f54:	08003e5c 	.word	0x08003e5c
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200

08002f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01e      	b.n	8002fb0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	223d      	movs	r2, #61	; 0x3d
 8002f76:	5c9b      	ldrb	r3, [r3, r2]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	223c      	movs	r2, #60	; 0x3c
 8002f82:	2100      	movs	r1, #0
 8002f84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fe f99d 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223d      	movs	r2, #61	; 0x3d
 8002f92:	2102      	movs	r1, #2
 8002f94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	0010      	movs	r0, r2
 8002fa2:	f000 fb51 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	223d      	movs	r2, #61	; 0x3d
 8002faa:	2101      	movs	r1, #1
 8002fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2101      	movs	r1, #1
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d007      	beq.n	8002ff2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e01e      	b.n	800304c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	223d      	movs	r2, #61	; 0x3d
 8003012:	5c9b      	ldrb	r3, [r3, r2]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	223c      	movs	r2, #60	; 0x3c
 800301e:	2100      	movs	r1, #0
 8003020:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f000 f815 	bl	8003054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223d      	movs	r2, #61	; 0x3d
 800302e:	2102      	movs	r1, #2
 8003030:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	0019      	movs	r1, r3
 800303c:	0010      	movs	r0, r2
 800303e:	f000 fb03 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	223d      	movs	r2, #61	; 0x3d
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fdcc 	bl	8003c14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_TIM_PWM_Start+0x80>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_TIM_PWM_Start+0x36>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_TIM_PWM_Start+0x84>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Start+0x36>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a15      	ldr	r2, [pc, #84]	; (80030ec <HAL_TIM_PWM_Start+0x88>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_TIM_PWM_Start+0x3a>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_TIM_PWM_Start+0x3c>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	0209      	lsls	r1, r1, #8
 80030b2:	430a      	orrs	r2, r1
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2207      	movs	r2, #7
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2101      	movs	r1, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b004      	add	sp, #16
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800

080030f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2202      	movs	r2, #2
 8003100:	4013      	ands	r3, r2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d124      	bne.n	8003150 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2202      	movs	r2, #2
 800310e:	4013      	ands	r3, r2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d11d      	bne.n	8003150 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2203      	movs	r2, #3
 800311a:	4252      	negs	r2, r2
 800311c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2203      	movs	r2, #3
 800312c:	4013      	ands	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 fa70 	bl	8003618 <HAL_TIM_IC_CaptureCallback>
 8003138:	e007      	b.n	800314a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f000 fa63 	bl	8003608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 fa6f 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2204      	movs	r2, #4
 8003158:	4013      	ands	r3, r2
 800315a:	2b04      	cmp	r3, #4
 800315c:	d125      	bne.n	80031aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2204      	movs	r2, #4
 8003166:	4013      	ands	r3, r2
 8003168:	2b04      	cmp	r3, #4
 800316a:	d11e      	bne.n	80031aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2205      	movs	r2, #5
 8003172:	4252      	negs	r2, r2
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	23c0      	movs	r3, #192	; 0xc0
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4013      	ands	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 fa43 	bl	8003618 <HAL_TIM_IC_CaptureCallback>
 8003192:	e007      	b.n	80031a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 fa36 	bl	8003608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fa42 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2208      	movs	r2, #8
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d124      	bne.n	8003202 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2208      	movs	r2, #8
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11d      	bne.n	8003202 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2209      	movs	r2, #9
 80031cc:	4252      	negs	r2, r2
 80031ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2204      	movs	r2, #4
 80031d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2203      	movs	r2, #3
 80031de:	4013      	ands	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 fa17 	bl	8003618 <HAL_TIM_IC_CaptureCallback>
 80031ea:	e007      	b.n	80031fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fa0a 	bl	8003608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fa16 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2210      	movs	r2, #16
 800320a:	4013      	ands	r3, r2
 800320c:	2b10      	cmp	r3, #16
 800320e:	d125      	bne.n	800325c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2210      	movs	r2, #16
 8003218:	4013      	ands	r3, r2
 800321a:	2b10      	cmp	r3, #16
 800321c:	d11e      	bne.n	800325c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2211      	movs	r2, #17
 8003224:	4252      	negs	r2, r2
 8003226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2208      	movs	r2, #8
 800322c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	23c0      	movs	r3, #192	; 0xc0
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4013      	ands	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f9ea 	bl	8003618 <HAL_TIM_IC_CaptureCallback>
 8003244:	e007      	b.n	8003256 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 f9dd 	bl	8003608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f000 f9e9 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2201      	movs	r2, #1
 8003264:	4013      	ands	r3, r2
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10f      	bne.n	800328a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	4013      	ands	r3, r2
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2202      	movs	r2, #2
 800327e:	4252      	negs	r2, r2
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f7fd ff6f 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	4013      	ands	r3, r2
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d10f      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d108      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2281      	movs	r2, #129	; 0x81
 80032ac:	4252      	negs	r2, r2
 80032ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fd8a 	bl	8003dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d10f      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d108      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2241      	movs	r2, #65	; 0x41
 80032da:	4252      	negs	r2, r2
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 f9a9 	bl	8003638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	2220      	movs	r2, #32
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d10f      	bne.n	8003314 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d108      	bne.n	8003314 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2221      	movs	r2, #33	; 0x21
 8003308:	4252      	negs	r2, r2
 800330a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fd54 	bl	8003dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	223c      	movs	r2, #60	; 0x3c
 800332c:	5c9b      	ldrb	r3, [r3, r2]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003332:	2302      	movs	r3, #2
 8003334:	e0a4      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	223c      	movs	r2, #60	; 0x3c
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	223d      	movs	r2, #61	; 0x3d
 8003342:	2102      	movs	r1, #2
 8003344:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d029      	beq.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x84>
 800334c:	d802      	bhi.n	8003354 <HAL_TIM_PWM_ConfigChannel+0x38>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003352:	e08c      	b.n	800346e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003354:	2b08      	cmp	r3, #8
 8003356:	d046      	beq.n	80033e6 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d065      	beq.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800335c:	e087      	b.n	800346e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f9da 	bl	8003720 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2108      	movs	r1, #8
 8003378:	430a      	orrs	r2, r1
 800337a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2104      	movs	r1, #4
 8003388:	438a      	bics	r2, r1
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	619a      	str	r2, [r3, #24]
      break;
 800339e:	e066      	b.n	800346e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	0011      	movs	r1, r2
 80033a8:	0018      	movs	r0, r3
 80033aa:	f000 fa37 	bl	800381c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0109      	lsls	r1, r1, #4
 80033bc:	430a      	orrs	r2, r1
 80033be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	492f      	ldr	r1, [pc, #188]	; (8003488 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6999      	ldr	r1, [r3, #24]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	021a      	lsls	r2, r3, #8
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	619a      	str	r2, [r3, #24]
      break;
 80033e4:	e043      	b.n	800346e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	0011      	movs	r1, r2
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 fa92 	bl	8003918 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2108      	movs	r1, #8
 8003400:	430a      	orrs	r2, r1
 8003402:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2104      	movs	r1, #4
 8003410:	438a      	bics	r2, r1
 8003412:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69d9      	ldr	r1, [r3, #28]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	61da      	str	r2, [r3, #28]
      break;
 8003426:	e022      	b.n	800346e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f000 faf1 	bl	8003a18 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2180      	movs	r1, #128	; 0x80
 8003442:	0109      	lsls	r1, r1, #4
 8003444:	430a      	orrs	r2, r1
 8003446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	490d      	ldr	r1, [pc, #52]	; (8003488 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003454:	400a      	ands	r2, r1
 8003456:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69d9      	ldr	r1, [r3, #28]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	61da      	str	r2, [r3, #28]
      break;
 800346c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	223d      	movs	r2, #61	; 0x3d
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	223c      	movs	r2, #60	; 0x3c
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b004      	add	sp, #16
 8003486:	bd80      	pop	{r7, pc}
 8003488:	fffffbff 	.word	0xfffffbff

0800348c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223c      	movs	r2, #60	; 0x3c
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_ConfigClockSource+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0ab      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	223c      	movs	r2, #60	; 0x3c
 80034a8:	2101      	movs	r1, #1
 80034aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	223d      	movs	r2, #61	; 0x3d
 80034b0:	2102      	movs	r1, #2
 80034b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2277      	movs	r2, #119	; 0x77
 80034c0:	4393      	bics	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a4f      	ldr	r2, [pc, #316]	; (8003604 <HAL_TIM_ConfigClockSource+0x178>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d100      	bne.n	80034de <HAL_TIM_ConfigClockSource+0x52>
 80034dc:	e06b      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x12a>
 80034de:	d80e      	bhi.n	80034fe <HAL_TIM_ConfigClockSource+0x72>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d100      	bne.n	80034e6 <HAL_TIM_ConfigClockSource+0x5a>
 80034e4:	e077      	b.n	80035d6 <HAL_TIM_ConfigClockSource+0x14a>
 80034e6:	d803      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x64>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d100      	bne.n	80034ee <HAL_TIM_ConfigClockSource+0x62>
 80034ec:	e073      	b.n	80035d6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034ee:	e07c      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d100      	bne.n	80034f6 <HAL_TIM_ConfigClockSource+0x6a>
 80034f4:	e06f      	b.n	80035d6 <HAL_TIM_ConfigClockSource+0x14a>
 80034f6:	2b30      	cmp	r3, #48	; 0x30
 80034f8:	d100      	bne.n	80034fc <HAL_TIM_ConfigClockSource+0x70>
 80034fa:	e06c      	b.n	80035d6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80034fc:	e075      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80034fe:	2b70      	cmp	r3, #112	; 0x70
 8003500:	d00e      	beq.n	8003520 <HAL_TIM_ConfigClockSource+0x94>
 8003502:	d804      	bhi.n	800350e <HAL_TIM_ConfigClockSource+0x82>
 8003504:	2b50      	cmp	r3, #80	; 0x50
 8003506:	d036      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0xea>
 8003508:	2b60      	cmp	r3, #96	; 0x60
 800350a:	d044      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800350c:	e06d      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	0152      	lsls	r2, r2, #5
 8003512:	4293      	cmp	r3, r2
 8003514:	d068      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x15c>
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	0192      	lsls	r2, r2, #6
 800351a:	4293      	cmp	r3, r2
 800351c:	d017      	beq.n	800354e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800351e:	e064      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6899      	ldr	r1, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f000 fb50 	bl	8003bd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2277      	movs	r2, #119	; 0x77
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]
      break;
 800354c:	e04d      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6899      	ldr	r1, [r3, #8]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f000 fb39 	bl	8003bd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	01c9      	lsls	r1, r1, #7
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
      break;
 8003574:	e039      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	001a      	movs	r2, r3
 8003584:	f000 faac 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2150      	movs	r1, #80	; 0x50
 800358e:	0018      	movs	r0, r3
 8003590:	f000 fb06 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 8003594:	e029      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	001a      	movs	r2, r3
 80035a4:	f000 faca 	bl	8003b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2160      	movs	r1, #96	; 0x60
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 faf6 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 80035b4:	e019      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	001a      	movs	r2, r3
 80035c4:	f000 fa8c 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2140      	movs	r1, #64	; 0x40
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fae6 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 80035d4:	e009      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0019      	movs	r1, r3
 80035e0:	0010      	movs	r0, r2
 80035e2:	f000 fadd 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 80035e6:	e000      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80035e8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	223d      	movs	r2, #61	; 0x3d
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	223c      	movs	r2, #60	; 0x3c
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bd80      	pop	{r7, pc}
 8003604:	ffff00ff 	.word	0xffff00ff

08003608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b002      	add	sp, #8
 8003646:	bd80      	pop	{r7, pc}

08003648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <TIM_Base_SetConfig+0xc0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0x20>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a2a      	ldr	r2, [pc, #168]	; (800370c <TIM_Base_SetConfig+0xc4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d108      	bne.n	800367a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2270      	movs	r2, #112	; 0x70
 800366c:	4393      	bics	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a22      	ldr	r2, [pc, #136]	; (8003708 <TIM_Base_SetConfig+0xc0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0x5a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a21      	ldr	r2, [pc, #132]	; (800370c <TIM_Base_SetConfig+0xc4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0x5a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <TIM_Base_SetConfig+0xc8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0x5a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <TIM_Base_SetConfig+0xcc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0x5a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <TIM_Base_SetConfig+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <TIM_Base_SetConfig+0xd4>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	4393      	bics	r3, r2
 80036ba:	001a      	movs	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <TIM_Base_SetConfig+0xc0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <TIM_Base_SetConfig+0xaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <TIM_Base_SetConfig+0xcc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_Base_SetConfig+0xaa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <TIM_Base_SetConfig+0xd0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d103      	bne.n	80036fa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	615a      	str	r2, [r3, #20]
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40012c00 	.word	0x40012c00
 800370c:	40000400 	.word	0x40000400
 8003710:	40002000 	.word	0x40002000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800
 800371c:	fffffcff 	.word	0xfffffcff

08003720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	2201      	movs	r2, #1
 8003730:	4393      	bics	r3, r2
 8003732:	001a      	movs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2270      	movs	r2, #112	; 0x70
 800374e:	4393      	bics	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2203      	movs	r2, #3
 8003756:	4393      	bics	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2202      	movs	r2, #2
 8003768:	4393      	bics	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <TIM_OC1_SetConfig+0xe8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <TIM_OC1_SetConfig+0x6e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a22      	ldr	r2, [pc, #136]	; (800380c <TIM_OC1_SetConfig+0xec>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_OC1_SetConfig+0x6e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a21      	ldr	r2, [pc, #132]	; (8003810 <TIM_OC1_SetConfig+0xf0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10c      	bne.n	80037a8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2208      	movs	r2, #8
 8003792:	4393      	bics	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2204      	movs	r2, #4
 80037a4:	4393      	bics	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <TIM_OC1_SetConfig+0xe8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_OC1_SetConfig+0xa0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <TIM_OC1_SetConfig+0xec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC1_SetConfig+0xa0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <TIM_OC1_SetConfig+0xf0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <TIM_OC1_SetConfig+0xf4>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <TIM_OC1_SetConfig+0xf8>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b006      	add	sp, #24
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800
 8003814:	fffffeff 	.word	0xfffffeff
 8003818:	fffffdff 	.word	0xfffffdff

0800381c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	2210      	movs	r2, #16
 800382c:	4393      	bics	r3, r2
 800382e:	001a      	movs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <TIM_OC2_SetConfig+0xe0>)
 800384a:	4013      	ands	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <TIM_OC2_SetConfig+0xe4>)
 8003852:	4013      	ands	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2220      	movs	r2, #32
 8003866:	4393      	bics	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <TIM_OC2_SetConfig+0xe8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10d      	bne.n	800389a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2280      	movs	r2, #128	; 0x80
 8003882:	4393      	bics	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2240      	movs	r2, #64	; 0x40
 8003896:	4393      	bics	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a19      	ldr	r2, [pc, #100]	; (8003904 <TIM_OC2_SetConfig+0xe8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <TIM_OC2_SetConfig+0x96>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <TIM_OC2_SetConfig+0xec>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_OC2_SetConfig+0x96>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a17      	ldr	r2, [pc, #92]	; (800390c <TIM_OC2_SetConfig+0xf0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d113      	bne.n	80038da <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <TIM_OC2_SetConfig+0xf4>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <TIM_OC2_SetConfig+0xf8>)
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	621a      	str	r2, [r3, #32]
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	ffff8fff 	.word	0xffff8fff
 8003900:	fffffcff 	.word	0xfffffcff
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800
 8003910:	fffffbff 	.word	0xfffffbff
 8003914:	fffff7ff 	.word	0xfffff7ff

08003918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	4a33      	ldr	r2, [pc, #204]	; (80039f4 <TIM_OC3_SetConfig+0xdc>)
 8003928:	401a      	ands	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2270      	movs	r2, #112	; 0x70
 8003944:	4393      	bics	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2203      	movs	r2, #3
 800394c:	4393      	bics	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <TIM_OC3_SetConfig+0xe0>)
 800395e:	4013      	ands	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <TIM_OC3_SetConfig+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <TIM_OC3_SetConfig+0xe8>)
 800397a:	4013      	ands	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_OC3_SetConfig+0xec>)
 800398e:	4013      	ands	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <TIM_OC3_SetConfig+0xe4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <TIM_OC3_SetConfig+0x92>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <TIM_OC3_SetConfig+0xf0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_OC3_SetConfig+0x92>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <TIM_OC3_SetConfig+0xf4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d113      	bne.n	80039d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <TIM_OC3_SetConfig+0xf8>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <TIM_OC3_SetConfig+0xfc>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	fffffeff 	.word	0xfffffeff
 80039f8:	fffffdff 	.word	0xfffffdff
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	fffff7ff 	.word	0xfffff7ff
 8003a04:	fffffbff 	.word	0xfffffbff
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800
 8003a10:	ffffefff 	.word	0xffffefff
 8003a14:	ffffdfff 	.word	0xffffdfff

08003a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <TIM_OC4_SetConfig+0xa8>)
 8003a28:	401a      	ands	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <TIM_OC4_SetConfig+0xac>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <TIM_OC4_SetConfig+0xb0>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <TIM_OC4_SetConfig+0xb4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	031b      	lsls	r3, r3, #12
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <TIM_OC4_SetConfig+0xb8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_OC4_SetConfig+0x70>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <TIM_OC4_SetConfig+0xbc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_OC4_SetConfig+0x70>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <TIM_OC4_SetConfig+0xc0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d109      	bne.n	8003a9c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <TIM_OC4_SetConfig+0xc4>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b006      	add	sp, #24
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	ffffefff 	.word	0xffffefff
 8003ac4:	ffff8fff 	.word	0xffff8fff
 8003ac8:	fffffcff 	.word	0xfffffcff
 8003acc:	ffffdfff 	.word	0xffffdfff
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	ffffbfff 	.word	0xffffbfff

08003ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4393      	bics	r3, r2
 8003afa:	001a      	movs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	22f0      	movs	r2, #240	; 0xf0
 8003b0a:	4393      	bics	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	220a      	movs	r2, #10
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	621a      	str	r2, [r3, #32]
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b006      	add	sp, #24
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	4393      	bics	r3, r2
 8003b50:	001a      	movs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <TIM_TI2_ConfigInputStage+0x60>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	22a0      	movs	r2, #160	; 0xa0
 8003b78:	4393      	bics	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b006      	add	sp, #24
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	ffff0fff 	.word	0xffff0fff

08003ba0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2270      	movs	r2, #112	; 0x70
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	2207      	movs	r2, #7
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <TIM_ETR_SetConfig+0x3c>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b006      	add	sp, #24
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	ffff00ff 	.word	0xffff00ff

08003c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	221f      	movs	r2, #31
 8003c24:	4013      	ands	r3, r2
 8003c26:	2201      	movs	r2, #1
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	43d2      	mvns	r2, r2
 8003c36:	401a      	ands	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	211f      	movs	r1, #31
 8003c44:	400b      	ands	r3, r1
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4099      	lsls	r1, r3
 8003c4a:	000b      	movs	r3, r1
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b006      	add	sp, #24
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	223c      	movs	r2, #60	; 0x3c
 8003c6a:	5c9b      	ldrb	r3, [r3, r2]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e03c      	b.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	223c      	movs	r2, #60	; 0x3c
 8003c78:	2101      	movs	r1, #1
 8003c7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	223d      	movs	r2, #61	; 0x3d
 8003c80:	2102      	movs	r1, #2
 8003c82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2270      	movs	r2, #112	; 0x70
 8003c98:	4393      	bics	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10c      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	4393      	bics	r3, r2
 8003cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	223d      	movs	r2, #61	; 0x3d
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	223c      	movs	r2, #60	; 0x3c
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b004      	add	sp, #16
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400

08003d00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	223c      	movs	r2, #60	; 0x3c
 8003d12:	5c9b      	ldrb	r3, [r3, r2]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e03e      	b.n	8003d9a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	223c      	movs	r2, #60	; 0x3c
 8003d20:	2101      	movs	r1, #1
 8003d22:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	22ff      	movs	r2, #255	; 0xff
 8003d28:	4393      	bics	r3, r2
 8003d2a:	001a      	movs	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003d38:	401a      	ands	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003d46:	401a      	ands	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a16      	ldr	r2, [pc, #88]	; (8003dac <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003d54:	401a      	ands	r2, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003d62:	401a      	ands	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a11      	ldr	r2, [pc, #68]	; (8003db4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003d70:	401a      	ands	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003d7e:	401a      	ands	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	223c      	movs	r2, #60	; 0x3c
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	fffffcff 	.word	0xfffffcff
 8003da8:	fffffbff 	.word	0xfffffbff
 8003dac:	fffff7ff 	.word	0xfffff7ff
 8003db0:	ffffefff 	.word	0xffffefff
 8003db4:	ffffdfff 	.word	0xffffdfff
 8003db8:	ffffbfff 	.word	0xffffbfff

08003dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	2600      	movs	r6, #0
 8003de0:	4d0c      	ldr	r5, [pc, #48]	; (8003e14 <__libc_init_array+0x38>)
 8003de2:	4c0d      	ldr	r4, [pc, #52]	; (8003e18 <__libc_init_array+0x3c>)
 8003de4:	1b64      	subs	r4, r4, r5
 8003de6:	10a4      	asrs	r4, r4, #2
 8003de8:	42a6      	cmp	r6, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	2600      	movs	r6, #0
 8003dee:	f000 f821 	bl	8003e34 <_init>
 8003df2:	4d0a      	ldr	r5, [pc, #40]	; (8003e1c <__libc_init_array+0x40>)
 8003df4:	4c0a      	ldr	r4, [pc, #40]	; (8003e20 <__libc_init_array+0x44>)
 8003df6:	1b64      	subs	r4, r4, r5
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	42a6      	cmp	r6, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	00b3      	lsls	r3, r6, #2
 8003e02:	58eb      	ldr	r3, [r5, r3]
 8003e04:	4798      	blx	r3
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	00b3      	lsls	r3, r6, #2
 8003e0c:	58eb      	ldr	r3, [r5, r3]
 8003e0e:	4798      	blx	r3
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	08003f3c 	.word	0x08003f3c
 8003e18:	08003f3c 	.word	0x08003f3c
 8003e1c:	08003f3c 	.word	0x08003f3c
 8003e20:	08003f40 	.word	0x08003f40

08003e24 <memset>:
 8003e24:	0003      	movs	r3, r0
 8003e26:	1812      	adds	r2, r2, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	7019      	strb	r1, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
